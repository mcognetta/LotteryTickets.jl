# mode: julia
	NNlib.conv(x, c_mask.weight.weight, Flux.conv_dims(c_mask, x))
# time: 2023-07-04 00:07:27 JST
# mode: julia
	NNlib.conv(x, c_mask.weight.w, Flux.conv_dims(c_mask, x))
# time: 2023-07-04 00:07:37 JST
# mode: julia
	NNlib.conv(x, c_mask.weight.w .* c_mask.weight.mask, Flux.conv_dims(c_mask, x))
# time: 2023-07-04 00:08:59 JST
# mode: julia
	c_mask(rand(Float32, 3, 3, 2, 1))
# time: 2023-07-04 00:11:11 JST
# mode: julia
	NNlib.conv(x, c_mask.weight.w .* c_mask.weight.mask, Flux.conv_dims(c_mask.weight, x))
# time: 2023-07-04 00:11:21 JST
# mode: julia
	NNlib.conv(x, c_mask.weight.w .* c_mask.weight.mask, Flux.conv_dims(c_mask, x))
# time: 2023-07-04 00:11:29 JST
# mode: julia
	c_mask(rand(Float32, 3, 3, 2, 1))
# time: 2023-07-04 00:11:50 JST
# mode: julia
	x = rand(Float32, 3, 3, 2, 1)
# time: 2023-07-04 00:11:51 JST
# mode: julia
	c(x)
# time: 2023-07-04 00:11:55 JST
# mode: julia
	c_mask(x)
# time: 2023-07-04 00:12:51 JST
# mode: julia
	@which NNlib.conv(x, c.weight, Flux.conv_dims(x, c.weight))
# time: 2023-07-04 00:13:00 JST
# mode: julia
	@which NNlib.conv(x, c.weight, Flux.conv_dims(c.weight, x))
# time: 2023-07-04 00:13:15 JST
# mode: julia
	@which NNlib.conv(x, c.weight, Flux.conv_dims(c.weight.weight, x))
# time: 2023-07-04 00:13:20 JST
# mode: julia
	@which NNlib.conv(x, c.weight, Flux.conv_dims(c, x))
# time: 2023-07-04 00:14:43 JST
# mode: julia
	c_mask(x)
# time: 2023-07-04 00:15:24 JST
# mode: julia
	f(c, x) = sum(c_mask(x))
# time: 2023-07-04 00:15:32 JST
# mode: julia
	f(c, x) = sum(c(x))
# time: 2023-07-04 00:15:36 JST
# mode: julia
	f(c, x)
# time: 2023-07-04 00:15:38 JST
# mode: julia
	f(c_mask, x)
# time: 2023-07-04 00:15:49 JST
# mode: julia
	Flux.gradient(f, c, x)
# time: 2023-07-04 00:15:56 JST
# mode: julia
	Flux.gradient(f, c_mask, x)
# time: 2023-07-04 00:16:46 JST
# mode: julia
	Flux.jacobian(f, c_mask, x)
# time: 2023-07-04 00:16:59 JST
# mode: julia
	@which Flux.jacobian(f, c, x)
# time: 2023-07-04 00:19:14 JST
# mode: julia
	Flux.jacobian(f, c, x)
# time: 2023-07-04 00:19:17 JST
# mode: julia
	Flux.jacobian(f, c, x)[1]
# time: 2023-07-04 00:19:19 JST
# mode: julia
	Flux.jacobian(f, c, x)[2]
# time: 2023-07-04 00:19:22 JST
# mode: julia
	c.weight
# time: 2023-07-04 00:19:42 JST
# mode: julia
	Flux.gradient(f, c, x)[2]
# time: 2023-07-04 00:19:47 JST
# mode: julia
	Flux.gradient(f, c, x)[1]
# time: 2023-07-04 00:19:50 JST
# mode: julia
	Flux.gradient(f, c, x)[2]
# time: 2023-07-04 00:24:11 JST
# mode: julia
	d = Dense(3, 5)
# time: 2023-07-04 00:24:29 JST
# mode: julia
	d(rand(3))
# time: 2023-07-04 00:24:39 JST
# mode: julia
	gradient(d, rand(3))
# time: 2023-07-04 00:24:53 JST
# mode: julia
	Flux.jacobian(d, rand(3))
# time: 2023-07-04 00:24:57 JST
# mode: julia
	Flux.jacobian(d, rand(3))[1]
# time: 2023-07-04 00:25:02 JST
# mode: julia
	D.weight
# time: 2023-07-04 00:25:04 JST
# mode: julia
	d.weight
# time: 2023-07-04 00:25:26 JST
# mode: julia
	@which Flux.jacobian(d, rand(3))
# time: 2023-07-04 00:25:48 JST
# mode: julia
	rrule(D, rand(3))
# time: 2023-07-04 00:25:50 JST
# mode: julia
	rrule(d, rand(3))
# time: 2023-07-04 00:25:55 JST
# mode: julia
	ChainRulesCore.rrule(d, rand(3))
# time: 2023-07-04 00:26:01 JST
# mode: julia
	Flux.rrule(d, rand(3))
# time: 2023-07-04 00:26:03 JST
# mode: julia
	Flux.rrule(d, rand(3))[1]
# time: 2023-07-04 00:26:11 JST
# mode: julia
	Flux.rrule(typeof(d), rand(3))
# time: 2023-07-04 00:26:17 JST
# mode: julia
	Flux.rrule(typeof(d), d, rand(3))
# time: 2023-07-04 00:27:44 JST
# mode: julia
	M = LotteryTickets.TestMaskedDense(d)
# time: 2023-07-04 00:28:11 JST
# mode: julia
	M.mask[1, 2] = false
# time: 2023-07-04 00:28:16 JST
# mode: julia
	M.m[1, 2] = false
# time: 2023-07-04 00:28:21 JST
# mode: julia
	M.m
# time: 2023-07-04 00:34:56 JST
# mode: julia
	NNlib.conv(x, c_mask)
# time: 2023-07-04 00:35:09 JST
# mode: julia
	NNlib.conv(x, c_mask.weight.w, Flux.conv_dims(c_mask, x))
# time: 2023-07-04 00:35:43 JST
# mode: julia
	Flux.jacobian(NNlib.conv, x, c_mask.weight.w .* c_mask.weight.mask, Flux.conv_dims(c_mask, x)))
# time: 2023-07-04 00:35:45 JST
# mode: julia
	Flux.jacobian(NNlib.conv, x, c_mask.weight.w .* c_mask.weight.mask, Flux.conv_dims(c_mask, x))
# time: 2023-07-04 00:35:49 JST
# mode: julia
	Flux.jacobian(NNlib.conv, x, c_mask.weight.w .* c_mask.weight.mask, Flux.conv_dims(c_mask, x))[1]
# time: 2023-07-04 00:35:53 JST
# mode: julia
	c_mask
# time: 2023-07-04 00:36:26 JST
# mode: julia
	using ChainRulesCore
# time: 2023-07-04 00:37:44 JST
# mode: julia
	ChainRulesCore.rrule(type(c), x)
# time: 2023-07-04 00:37:47 JST
# mode: julia
	ChainRulesCore.rrule(typeof(c), x)
# time: 2023-07-04 00:38:14 JST
# mode: julia
	Flux.rrule(typeof(c), x)
# time: 2023-07-04 00:38:18 JST
# mode: julia
	@which Flux.rrule(typeof(c), x)
# time: 2023-07-04 00:39:53 JST
# mode: julia
	c(x)
# time: 2023-07-04 00:39:55 JST
# mode: julia
	@which c(x)
# time: 2023-07-04 00:41:00 JST
# mode: julia
	using Zygote
# time: 2023-07-04 00:41:18 JST
# mode: julia
	Flux.gradient(c, x)
# time: 2023-07-04 00:41:31 JST
# mode: julia
	f(c, x) = sum(c(x))
# time: 2023-07-04 00:41:36 JST
# mode: julia
	Flux.gradient(f, c, x)
# time: 2023-07-04 00:41:41 JST
# mode: julia
	@which Flux.gradient(f, c, x)
# time: 2023-07-04 00:41:59 JST
# mode: julia
	Flux.pullback
# time: 2023-07-04 00:42:03 JST
# mode: julia
	Flux.pullback(f, c, x)
# time: 2023-07-04 00:42:11 JST
# mode: julia
	Flux.pullback(c, x)
# time: 2023-07-04 00:42:20 JST
# mode: julia
	Flux.jacobian(c, x)
# time: 2023-07-04 00:42:38 JST
# mode: julia
	ChainRulesCore.rrule(c, x)
# time: 2023-07-04 00:42:50 JST
# mode: julia
	@which Flux.jacobian(c, x)
# time: 2023-07-04 00:53:06 JST
# mode: julia
	Flux.gradient(c, x)
# time: 2023-07-04 00:53:12 JST
# mode: julia
	Flux.jacobian(c, x)
# time: 2023-07-04 00:53:17 JST
# mode: julia
	@which Flux.jacobian(c, x)
# time: 2023-07-04 00:53:42 JST
# mode: julia
	Flux.jacobian(*, MaskedMatrix(rand(3, 3)), rand(3))
# time: 2023-07-04 00:54:33 JST
# mode: julia
	@which Flux.jacobian(*, MaskedMatrix(rand(3, 3)), rand(3))
# time: 2023-07-04 00:54:45 JST
# mode: julia
	@which Flux.withjacobian(*, MaskedMatrix(rand(3, 3)), rand(3))
# time: 2023-07-04 00:56:16 JST
# mode: julia
	Flux.pullback(c, x)
# time: 2023-07-04 00:56:27 JST
# mode: julia
	@which Flux.pullback(c, x)
# time: 2023-07-04 01:07:50 JST
# mode: julia
	function ChainRulesCore.rrule(c::MaskConv, x)
	    c_pullback(Δy) = Tangent{MaskConv}(;x=Δy), Δy
	    return c(x), c_pullback
	end
# time: 2023-07-04 01:07:56 JST
# mode: julia
	struct MaskConv
	    c
	end
# time: 2023-07-04 01:08:00 JST
# mode: julia
	function ChainRulesCore.rrule(c::MaskConv, x)
	    c_pullback(Δy) = Tangent{MaskConv}(;x=Δy), Δy
	    return c(x), c_pullback
	end
# time: 2023-07-04 01:08:08 JST
# mode: julia
	c
# time: 2023-07-04 01:08:20 JST
# mode: julia
	mm = MaskConv(c)
# time: 2023-07-04 01:08:22 JST
# mode: julia
	mm(x)
# time: 2023-07-04 01:08:23 JST
# mode: julia
	x
# time: 2023-07-04 01:08:33 JST
# mode: julia
	(c::MaskConv)(x) = c.c(x)
# time: 2023-07-04 01:08:34 JST
# mode: julia
	x
# time: 2023-07-04 01:08:36 JST
# mode: julia
	mm(x)
# time: 2023-07-04 01:08:44 JST
# mode: julia
	Flux.jacobian(mm, x)
# time: 2023-07-04 01:09:14 JST
# mode: julia
	function ChainRulesCore.rrule(c::MaskConv, x)
	    c_pullback(Δy) = Tangent{MaskConv}(;c=Δy), Δy
	    return c(x), c_pullback
	end
# time: 2023-07-04 01:09:16 JST
# mode: julia
	Flux.jacobian(mm, x)
# time: 2023-07-04 01:09:24 JST
# mode: julia
	Flux.jacobian(c, x)
# time: 2023-07-04 01:09:30 JST
# mode: julia
	Flux.jacobian(mm, x)[1]
# time: 2023-07-04 01:09:32 JST
# mode: julia
	Flux.jacobian(c, x)[1]
# time: 2023-07-04 01:10:48 JST
# mode: julia
	function ChainRulesCore.rrule(c::MaskConv, x)
	    c_pullback(Δy) = Tangent{MaskConv}(;c=c(x)'), Δy
	    return c(x), c_pullback
	end
# time: 2023-07-04 01:10:50 JST
# mode: julia
	Flux.jacobian(c, x)[1]
# time: 2023-07-04 01:10:53 JST
# mode: julia
	Flux.jacobian(mm, x)[1]
# time: 2023-07-04 01:11:09 JST
# mode: julia
	function ChainRulesCore.rrule(c::MaskConv, x)
	    c_pullback(Δy) = Tangent{MaskConv}(;c=c(x)), Δy
	    return c(x), c_pullback
	end
# time: 2023-07-04 01:11:11 JST
# mode: julia
	Flux.jacobian(mm, x)[1]
# time: 2023-07-04 01:11:13 JST
# mode: julia
	Flux.jacobian(c, x)[1]
# time: 2023-07-04 01:11:27 JST
# mode: julia
	c(x)
# time: 2023-07-04 01:11:30 JST
# mode: julia
	mm(x)
# time: 2023-07-04 01:11:53 JST
# mode: julia
	function ChainRulesCore.rrule(mm::MaskConv, x)
	    c_pullback(Δy) = Tangent{MaskConv}(;c=mm(x)), Δy
	    return mm(x), c_pullback
	end
# time: 2023-07-04 01:11:56 JST
# mode: julia
	mm(x)
# time: 2023-07-04 01:12:03 JST
# mode: julia
	Flux.jacobian(mm, x)[1]
# time: 2023-07-04 01:12:08 JST
# mode: julia
	Flux.jacobian(c,x)[1]
# time: 2023-07-04 01:12:17 JST
# mode: julia
	function ChainRulesCore.rrule(mm::MaskConv, x)
	    c_pullback(Δy) = Tangent{MaskConv}(;c=mm(x)), Δy
	    return mm(x), c_pullback
	end
# time: 2023-07-04 01:13:06 JST
# mode: julia
	function ChainRulesCore.rrule(mm::MaskConv, x)
	    println("YO")
	    c_pullback(Δy) = Tangent{MaskConv}(;c=mm(x)), Δy
	    return mm(x), c_pullback
	end
# time: 2023-07-04 01:13:08 JST
# mode: julia
	Flux.jacobian(c,x)[1]
# time: 2023-07-04 01:13:11 JST
# mode: julia
	Flux.jacobian(mm,x)[1]
# time: 2023-07-04 01:13:31 JST
# mode: julia
	mm(x)
# time: 2023-07-04 01:13:32 JST
# mode: julia
	x
# time: 2023-07-04 01:13:36 JST
# mode: julia
	c(x) == mm(x)
# time: 2023-07-04 01:13:40 JST
# mode: julia
	Flux.jacobian(c,x)[1]
# time: 2023-07-04 01:13:41 JST
# mode: julia
	Flux.jacobian(c,x)[2]
# time: 2023-07-04 01:13:45 JST
# mode: julia
	Flux.jacobian(c,x)
# time: 2023-07-04 01:13:49 JST
# mode: julia
	Flux.jacobian(mm,x)
# time: 2023-07-04 01:14:37 JST
# mode: julia
	function ChainRulesCore.rrule(mm::MaskConv, x)
	    println("YO")
	    c_pullback(Δy) = Tangent{MaskConv}(;c=mm.c), Δy
	    return mm(x), c_pullback
	end
# time: 2023-07-04 01:14:39 JST
# mode: julia
	Flux.jacobian(mm,x)
# time: 2023-07-04 01:14:43 JST
# mode: julia
	Flux.jacobian(c,x)
# time: 2023-07-04 01:14:50 JST
# mode: julia
	Flux.jacobian(c,x)[1]
# time: 2023-07-04 01:14:52 JST
# mode: julia
	c(x)
# time: 2023-07-04 01:15:54 JST
# mode: julia
	function ChainRulesCore.rrule(mm::MaskConv, x)
	    println("YO")
	    function c_pullback(Δy)Tangent{MaskConv}(;c=), Δy
	    return mm(x), c_pullback
	end
# time: 2023-07-04 01:17:16 JST
# mode: julia
	function ChainRulesCore.rrule(mm::MaskConv, x)
	    println("YO")
	    function c_pullback(Δy)
	        _, base_pullback = ChainRulesCore.rrule(mm.c, x)
	        t = Tangent{MaskConv}(;c=base_pullback(Δy)), \Deltay
	    return mm(x), c_pullback
	end
# time: 2023-07-04 01:17:40 JST
# mode: julia
	function ChainRulesCore.rrule(mm::MaskConv, x)
	    println("YO")
	    function c_pullback(Δy)
	        _, base_pullback = ChainRulesCore.rrule(mm.c, x)
	        t = Tangent{MaskConv}(;c=base_pullback(Δy)), Δy
	        return t
	    end
	    return mm(x), c_pullback
	end
# time: 2023-07-04 01:17:43 JST
# mode: julia
	Flux.jacobian(c,x)[1]
# time: 2023-07-04 01:17:47 JST
# mode: julia
	Flux.jacobian(mm,x)[1]
# time: 2023-07-04 20:19:03 JST
# mode: julia
	using Flux
# time: 2023-07-04 20:19:14 JST
# mode: julia
	d = Flux.Dense(3, 5)
# time: 2023-07-04 20:19:26 JST
# mode: julia
	Flux.pullback(d, rand(3))
# time: 2023-07-04 20:19:33 JST
# mode: julia
	Flux.pullback(d, rand(Float32, 3))
# time: 2023-07-04 20:19:34 JST
# mode: julia
	Flux.pullback(d, rand(Float32, 3))[1]
# time: 2023-07-04 20:19:38 JST
# mode: julia
	Flux.pullback(d, rand(Float32, 3))[2]
# time: 2023-07-04 20:19:52 JST
# mode: julia
	Flux.pullback(d, rand(Float32, 3))[2](rand(Float32, 3))
# time: 2023-07-04 20:19:57 JST
# mode: julia
	Flux.pullback(d, rand(Float32, 3))[2](rand(Float32, 5))
# time: 2023-07-04 20:20:03 JST
# mode: julia
	Flux.pullback(d, rand(Float32, 3))[3]
# time: 2023-07-04 20:20:07 JST
# mode: julia
	Flux.pullback(d, rand(Float32, 3))[2]
# time: 2023-07-04 20:20:09 JST
# mode: julia
	Flux.pullback(d, rand(Float32, 3))[2][1]
# time: 2023-07-04 20:20:12 JST
# mode: julia
	Flux.pullback(d, rand(Float32, 3))[2]
# time: 2023-07-04 20:20:23 JST
# mode: julia
	x = rand(Float32, 3)
# time: 2023-07-04 20:20:24 JST
# mode: julia
	D(x)
# time: 2023-07-04 20:20:27 JST
# mode: julia
	d(x)
# time: 2023-07-04 20:20:36 JST
# mode: julia
	Flux.pullback(d, x)
# time: 2023-07-04 20:20:38 JST
# mode: julia
	Flux.pullback(d, x)[1]
# time: 2023-07-04 20:20:41 JST
# mode: julia
	Flux.pullback(d, x)[2]
# time: 2023-07-04 20:20:56 JST
# mode: julia
	Flux.pullback(d, x)[2](rand(Float32, 5))
# time: 2023-07-04 20:21:15 JST
# mode: julia
	Flux.pullback(d, x)[2](rand(Float32, 5)) * Transpose(D.weight)
# time: 2023-07-04 20:21:18 JST
# mode: julia
	Flux.pullback(d, x)[2](rand(Float32, 5)) * Transpose(d.weight)
# time: 2023-07-04 20:21:22 JST
# mode: julia
	Flux.pullback(d, x)[2](rand(Float32, 5)) * transpose(d.weight)
# time: 2023-07-04 20:22:56 JST
# mode: julia
	Flux.pullback(d, x)[2](rand(Float32, 1, 5))
# time: 2023-07-04 20:22:59 JST
# mode: julia
	Flux.pullback(d, x)[2](rand(Float32,5, 1))
# time: 2023-07-04 20:23:01 JST
# mode: julia
	Flux.pullback(d, x)[2](rand(Float32,5, 1))[1]
# time: 2023-07-04 20:23:07 JST
# mode: julia
	Flux.pullback(d, x)[2](rand(Float32,3, 1))
# time: 2023-07-04 20:23:10 JST
# mode: julia
	Flux.pullback(d, x)[2](rand(Float32, 1, 3))
# time: 2023-07-04 20:23:18 JST
# mode: julia
	Flux.pullback(d, x)[2](rand(Float32,3))
# time: 2023-07-04 20:23:21 JST
# mode: julia
	Flux.pullback(d, x)[2](rand(Float32,5))
# time: 2023-07-04 20:23:45 JST
# mode: julia
	Flux.jacobian(d, x)
# time: 2023-07-04 20:23:49 JST
# mode: julia
	Flux.jacobian(d, x)[1]
# time: 2023-07-04 20:25:29 JST
# mode: julia
	f(d, x) = sum(d(x))
# time: 2023-07-04 20:25:31 JST
# mode: julia
	f(d, x)
# time: 2023-07-04 20:25:38 JST
# mode: julia
	Flux.pullback(f, d, x)
# time: 2023-07-04 20:25:40 JST
# mode: julia
	Flux.pullback(f, d, x)[1]
# time: 2023-07-04 20:25:43 JST
# mode: julia
	Flux.pullback(f, d, x)[2]
# time: 2023-07-04 20:25:57 JST
# mode: julia
	Flux.pullback(f, d, x)[2](-2.457812)
# time: 2023-07-04 20:26:03 JST
# mode: julia
	Flux.pullback(f, d, x)[2](-2.457812)[1]
# time: 2023-07-04 20:26:05 JST
# mode: julia
	Flux.pullback(f, d, x)[2](-2.457812)[1].weight
# time: 2023-07-04 20:26:18 JST
# mode: julia
	Flux.pullback(f, d, x)[2](-2.457812)[1].bias
# time: 2023-07-04 20:26:22 JST
# mode: julia
	Flux.pullback(f, d, x)[2](-2.457812)[2].bias
# time: 2023-07-04 20:26:25 JST
# mode: julia
	Flux.pullback(f, d, x)[2](-2.457812)[2]
# time: 2023-07-04 20:26:39 JST
# mode: julia
	d(x)
# time: 2023-07-04 20:26:50 JST
# mode: julia
	Flux.pullback(f, d, x)[2](-2.457812)[1]
# time: 2023-07-04 20:26:51 JST
# mode: julia
	Flux.pullback(f, d, x)[2](-2.457812)[1].weight
# time: 2023-07-04 20:26:55 JST
# mode: julia
	d.weight
# time: 2023-07-04 20:28:17 JST
# mode: julia
	Flux.@adjoint
# time: 2023-07-04 20:28:22 JST
# mode: julia
	@adjoint
# time: 2023-07-04 20:28:36 JST
# mode: julia
	using Zygote
# time: 2023-07-04 20:30:34 JST
# mode: julia
	struct FakeDense
	    d::Dense
	    orig
	    mask
	end
# time: 2023-07-04 20:30:34 JST
# mode: julia
	(f::FakeDense)(x) = (f.d.weight .*= f.mask; f.d(x))
# time: 2023-07-04 20:33:15 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense, x)
	    f.d.weight .*= f.mask
	    out = f.d(x)
	    return out, x̂ -> (nothing, f.d(x̂) .* f.mask)
	end
# time: 2023-07-04 20:35:01 JST
# mode: julia
	function FakeDense(d::Dense)
	    orig = copy(d.weight)
	    mask = similar(x, Bool) .= true
	    FakeDense(d, orig, mask)
	end
# time: 2023-07-04 20:35:04 JST
# mode: julia
	d = Dense(3, 5)
# time: 2023-07-04 20:35:09 JST
# mode: julia
	f = FakeDense(d)
# time: 2023-07-04 20:35:13 JST
# mode: julia
	fake = FakeDense(d)
# time: 2023-07-04 20:35:17 JST
# mode: julia
	fake(x)
# time: 2023-07-04 20:35:21 JST
# mode: julia
	x = rand(3)
# time: 2023-07-04 20:35:24 JST
# mode: julia
	fake(x)
# time: 2023-07-04 20:35:41 JST
# mode: julia
	d(x)
# time: 2023-07-04 20:35:52 JST
# mode: julia
	fake.mask
# time: 2023-07-04 20:36:09 JST
# mode: julia
	function FakeDense(d::Dense)
	    orig = copy(d.weight)
	    mask = similar(orig, Bool) .= true
	    FakeDense(d, orig, mask)
	end
# time: 2023-07-04 20:36:14 JST
# mode: julia
	fake = FakeDense(d)
# time: 2023-07-04 20:36:16 JST
# mode: julia
	fake(x)
# time: 2023-07-04 20:36:21 JST
# mode: julia
	d(x)
# time: 2023-07-04 20:36:32 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense, x)
	    f.d.weight .*= f.mask
	    out = f.d(x)
	    return out, x̂ -> (nothing, f.d(x̂) .* f.mask)
	end
# time: 2023-07-04 20:36:48 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    out = f.d(x)
	    return out, x̂ -> (nothing, f.d(x̂) .* f.mask)
	end
# time: 2023-07-04 20:36:56 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    out = f.d(x)
	    return out, x̂ -> (nothing, f.d(x̂) .* f.mask)
	end
# time: 2023-07-04 20:37:09 JST
# mode: julia
	Flux.jacboian(d, x)
# time: 2023-07-04 20:37:15 JST
# mode: julia
	Flux.jacobian(d, x)
# time: 2023-07-04 20:37:24 JST
# mode: julia
	Flux.jacobian(fka, x)
# time: 2023-07-04 20:37:26 JST
# mode: julia
	Flux.jacobian(fake, x)
# time: 2023-07-04 20:39:32 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    out = f.d(x)
	    return out, x̂ -> (println("x̂ = $x̂"); (nothing, f.d(x̂) .* f.mask))
	end
# time: 2023-07-04 20:39:34 JST
# mode: julia
	Flux.jacobian(fake, x)
# time: 2023-07-04 21:12:05 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    out = f.d(x)
	    return out, x̂ -> (println("x̂ = $x̂"); (nothing, f.d(x̂') .* f.mask))
	end
# time: 2023-07-04 21:12:07 JST
# mode: julia
	Flux.jacobian(fake, x)
# time: 2023-07-04 21:12:15 JST
# mode: julia
	Flux.jacobian(d, x)
# time: 2023-07-04 21:12:17 JST
# mode: julia
	Flux.jacobian(d, x)[1]
# time: 2023-07-04 21:12:23 JST
# mode: julia
	d.weight
# time: 2023-07-04 21:12:57 JST
# mode: julia
	Flux.jacobian(fake, x)
# time: 2023-07-04 21:13:21 JST
# mode: julia
	g(f, x) = sum(f(x))
# time: 2023-07-04 21:13:31 JST
# mode: julia
	Flux.gradient(g, d, x)
# time: 2023-07-04 21:13:33 JST
# mode: julia
	Flux.gradient(g, d, x)[1]
# time: 2023-07-04 21:13:36 JST
# mode: julia
	Flux.gradient(g, fake, x)[1]
# time: 2023-07-04 21:13:54 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    out = f.d(x)
	    return out, x̂ -> (println("x̂ = $x̂"); (nothing, f.d(x̂) .* f.mask))
	end
# time: 2023-07-04 21:13:55 JST
# mode: julia
	Flux.gradient(g, fake, x)[1]
# time: 2023-07-04 21:14:28 JST
# mode: julia
	x = rand(3, 2)
# time: 2023-07-04 21:14:33 JST
# mode: julia
	Flux.gradient(g, d, x)[1]
# time: 2023-07-04 21:14:38 JST
# mode: julia
	Flux.gradient(g, d, x)[1].weight
# time: 2023-07-04 21:14:43 JST
# mode: julia
	Flux.gradient(g, fake, x)[1].weight
# time: 2023-07-04 21:14:57 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    out = f.d(x)
	    return out, x̂ -> (println("x̂ = $x̂"); (nothing, f.d(x̂') .* f.mask))
	end
# time: 2023-07-04 21:21:26 JST
# mode: julia
	using Cthulhu
# time: 2023-07-04 21:22:30 JST
# mode: julia
	@descend Flux.gradient(g, d, x)
# time: 2023-07-04 21:25:18 JST
# mode: julia
	Flux.gradient(d, x)
# time: 2023-07-04 21:25:26 JST
# mode: julia
	Flux.jacobian(d, x)
# time: 2023-07-04 21:25:28 JST
# mode: julia
	Flux.jacobian(d, x)[1]
# time: 2023-07-04 21:25:33 JST
# mode: julia
	Flux.jacobian(f, x)[1]
# time: 2023-07-04 21:25:44 JST
# mode: julia
	Flux.jacobian(fake, x)[1]
# time: 2023-07-04 21:27:28 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    out = f.d(x)
	    return out, x̂ -> (println("x̂ = $x̂"); (nothing, x̂ .* f.mask)
	end
# time: 2023-07-04 21:27:37 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    out = f.d(x)
	    return out, x̂ -> (println("x̂ = $x̂"); (nothing, x̂ .* f.mask))
	end
# time: 2023-07-04 21:27:40 JST
# mode: julia
	Flux.jacobian(fake, x)[1]
# time: 2023-07-04 21:28:16 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    out = f.d(x)
	    return out, x̂ -> (println("x̂ = $x̂ ", size(x̂)); (nothing, x̂ .* f.mask))
	end
# time: 2023-07-04 21:28:17 JST
# mode: julia
	Flux.jacobian(fake, x)[1]
# time: 2023-07-04 21:29:04 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    (_, pullback) = Flux.gradient(f.d(x))
	    return out, x̂ -> (println("x̂ = $x̂ ", size(x̂)); (nothing, pullback(x̂) .* f.mask))
	end
# time: 2023-07-04 21:29:06 JST
# mode: julia
	Flux.jacobian(fake, x)[1]
# time: 2023-07-04 21:29:41 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    (temp, pullback) = Flux.gradient(f.d(x))
	    println(typeof(temp))
	    println(typeof(pullback))
	    return out, x̂ -> (println("x̂ = $x̂ ", size(x̂)); (nothing, pullback(x̂) .* f.mask))
	end
# time: 2023-07-04 21:29:42 JST
# mode: julia
	Flux.jacobian(fake, x)[1]
# time: 2023-07-04 21:30:11 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    (temp, pullback) = Flux.gradient(f.d, x)
	    println(typeof(temp))
	    println(typeof(pullback))
	    return out, x̂ -> (println("x̂ = $x̂ ", size(x̂)); (nothing, pullback(x̂) .* f.mask))
	end
# time: 2023-07-04 21:30:12 JST
# mode: julia
	Flux.jacobian(fake, x)[1]
# time: 2023-07-04 21:30:22 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    (temp, pullback) = Flux.jacobian(f.d, x)
	    println(typeof(temp))
	    println(typeof(pullback))
	    return out, x̂ -> (println("x̂ = $x̂ ", size(x̂)); (nothing, pullback(x̂) .* f.mask))
	end
# time: 2023-07-04 21:30:23 JST
# mode: julia
	Flux.jacobian(fake, x)[1]
# time: 2023-07-04 21:30:44 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    temp = Flux.jacobian(f.d, x)
	    println(typeof(temp))
	    return out, x̂ -> (println("x̂ = $x̂ ", size(x̂)); (nothing, pullback(x̂) .* f.mask))
	end
# time: 2023-07-04 21:30:44 JST
# mode: julia
	Flux.jacobian(fake, x)[1]
# time: 2023-07-04 21:31:13 JST
# mode: julia
	pullback(d, x)
# time: 2023-07-04 21:31:32 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    (out, pb) = pullback(f.d, x)
	    println(typeof(temp))
	    return out, x̂ -> (println("x̂ = $x̂ ", size(x̂)); (nothing, pb(x̂) .* f.mask))
	end
# time: 2023-07-04 21:31:33 JST
# mode: julia
	pullback(d, x)
# time: 2023-07-04 21:31:36 JST
# mode: julia
	Flux.jacobian(fake, x)[1]
# time: 2023-07-04 21:31:43 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    (out, pb) = pullback(f.d, x)
	    # println(typeof(temp))
	    return out, x̂ -> (println("x̂ = $x̂ ", size(x̂)); (nothing, pb(x̂) .* f.mask))
	end
# time: 2023-07-04 21:31:43 JST
# mode: julia
	Flux.jacobian(fake, x)[1]
# time: 2023-07-04 21:32:21 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    (out, pb) = pullback(f.d, x)
	    return out, x̂ -> (println("x̂ = $x̂ ", size(x̂)); println(pb(x̂)); (nothing, pb(x̂) .* f.mask))
	end
# time: 2023-07-04 21:32:22 JST
# mode: julia
	Flux.jacobian(fake, x)[1]
# time: 2023-07-04 21:32:32 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    (out, pb) = pullback(f.d, x)
	    return out, x̂ -> (println("x̂ = $x̂ ", size(x̂)); println(pb(x̂)); (nothing, pb(x̂)[1] .* f.mask))
	end
# time: 2023-07-04 21:32:33 JST
# mode: julia
	Flux.jacobian(fake, x)[1]
# time: 2023-07-04 21:32:40 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    println("YO")
	    f.d.weight .*= f.mask
	    (out, pb) = pullback(f.d, x)
	    return out, x̂ -> (println("x̂ = $x̂ ", size(x̂)); println(pb(x̂)); (nothing, pb(x̂)[1] .* f.mask'))
	end
# time: 2023-07-04 21:32:40 JST
# mode: julia
	Flux.jacobian(fake, x)[1]
# time: 2023-07-04 21:32:59 JST
# mode: julia
	pullback(d, x)
# time: 2023-07-04 21:33:01 JST
# mode: julia
	pullback(d, x)[1]
# time: 2023-07-04 21:33:04 JST
# mode: julia
	pullback(d, x)[2]
# time: 2023-07-04 21:33:10 JST
# mode: julia
	pullback(d, x)[2](rand(5))
# time: 2023-07-04 21:33:15 JST
# mode: julia
	pullback(d, x)[2](rand(3))
# time: 2023-07-04 21:33:18 JST
# mode: julia
	pullback(d, x)[2](rand(5, 2))
# time: 2023-07-04 21:33:21 JST
# mode: julia
	pullback(d, x)[2](rand(5, 2))[1]
# time: 2023-07-04 21:34:45 JST
# mode: julia
	@adjoint (f::FakeDense)(x) = x, x̂ -> (nothing, fake.mask .* x̂)
# time: 2023-07-04 21:34:49 JST
# mode: julia
	Zygote.@adjoint (f::FakeDense)(x) = x, x̂ -> (nothing, fake.mask .* x̂)
# time: 2023-07-04 21:35:04 JST
# mode: julia
	pullback(fake, x)
# time: 2023-07-04 21:35:10 JST
# mode: julia
	pullback(fake, x)[1]
# time: 2023-07-04 21:35:17 JST
# mode: julia
	pullback(fake, x)[2]
# time: 2023-07-04 21:35:25 JST
# mode: julia
	x
# time: 2023-07-04 21:35:33 JST
# mode: julia
	pullback(d, x)[1]
# time: 2023-07-04 21:35:50 JST
# mode: julia
	adjoint(d, x)
# time: 2023-07-04 21:37:24 JST
# mode: julia
	Zygote.@adjoint (f::FakeDense)(x) = x, x̂ -> (f.d(x), nothing, Zygote._pullback(fake.mask, x)[2](ŷ) .* f.mask)
# time: 2023-07-04 21:37:29 JST
# mode: julia
	pullback(d, x)
# time: 2023-07-04 21:37:32 JST
# mode: julia
	pullback(fake, x)
# time: 2023-07-04 21:38:30 JST
# mode: julia
	Zygote.@adjoint (f::FakeDense)(x) = f.d(x), x̂ -> Zygote._pullback(fake.mask, x)[2](ŷ) .* f.mask
# time: 2023-07-04 21:38:31 JST
# mode: julia
	pullback(fake, x)
# time: 2023-07-04 21:38:40 JST
# mode: julia
	pullback(d, x)
# time: 2023-07-04 21:38:50 JST
# mode: julia
	pullback(fake, x)
# time: 2023-07-04 21:38:51 JST
# mode: julia
	pullback(fake, x)[1]
# time: 2023-07-04 21:38:59 JST
# mode: julia
	f.orig
# time: 2023-07-04 21:39:08 JST
# mode: julia
	fake.orig
# time: 2023-07-04 21:39:15 JST
# mode: julia
	pullback(fake, x)[2]
# time: 2023-07-04 21:39:18 JST
# mode: julia
	pullback(fake, x)[2](rand(5))
# time: 2023-07-04 21:39:22 JST
# mode: julia
	pullback(fake, x)[2](rand(3))
# time: 2023-07-04 21:39:32 JST
# mode: julia
	pullback(d, x)[2](rand(3))
# time: 2023-07-04 21:39:35 JST
# mode: julia
	pullback(d, x)[2](rand(5))
# time: 2023-07-04 21:39:37 JST
# mode: julia
	pullback(d, x)[2](rand(2, 5))
# time: 2023-07-04 21:39:40 JST
# mode: julia
	pullback(d, x)[2](rand(5, 2))
# time: 2023-07-04 21:39:43 JST
# mode: julia
	pullback(fake, x)[2](rand(5, 2))
# time: 2023-07-04 21:41:56 JST
# mode: julia
	Zygote.@adjoint (f::FakeDense)(x)
# time: 2023-07-04 21:43:05 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    out = f.d(x)
	    pb = ŷ -> Zygote._pullback(f.d, x)[2](ŷ) .* f.mask
	    return out, pb
	end
# time: 2023-07-04 21:43:07 JST
# mode: julia
	pullback(fake, x)[2](rand(5, 2))
# time: 2023-07-04 21:43:13 JST
# mode: julia
	pullback(d, x)
# time: 2023-07-04 21:43:19 JST
# mode: julia
	pullback(d, x)[2](rand(2, 5))
# time: 2023-07-04 21:43:23 JST
# mode: julia
	pullback(d, x)[2](rand(5, 2))
# time: 2023-07-04 21:43:27 JST
# mode: julia
	pullback(fake, x)[2](rand(5, 2))
# time: 2023-07-04 21:43:36 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    out = f.d(x)
	    pb = ŷ -> Zygote._pullback(f.d, x)[2](ŷ) .* f.mask'
	    return out, pb
	end
# time: 2023-07-04 21:43:37 JST
# mode: julia
	pullback(fake, x)[2](rand(5, 2))
# time: 2023-07-04 21:43:40 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    out = f.d(x)
	    pb = ŷ -> Zygote._pullback(f.d, x)[2](ŷ) .* f.mask'
	    return out, pb
	end
# time: 2023-07-04 21:44:02 JST
# mode: julia
	pullback(fake, x)
# time: 2023-07-04 21:44:04 JST
# mode: julia
	pullback(fake, x)[1]
# time: 2023-07-04 21:44:06 JST
# mode: julia
	pullback(fake, x)[2]
# time: 2023-07-04 21:44:08 JST
# mode: julia
	pullback(fake, x)[3]
# time: 2023-07-04 21:44:10 JST
# mode: julia
	pullback(fake, x)[2]
# time: 2023-07-04 21:44:13 JST
# mode: julia
	pullback(fake, x)[2](1.0)
# time: 2023-07-04 21:44:30 JST
# mode: julia
	g(f, x) = sum(f(x))
# time: 2023-07-04 21:44:41 JST
# mode: julia
	pullback(g, d, x)
# time: 2023-07-04 21:44:44 JST
# mode: julia
	pullback(g, d, x)[1]
# time: 2023-07-04 21:44:45 JST
# mode: julia
	pullback(g, d, x)[2]
# time: 2023-07-04 21:44:47 JST
# mode: julia
	pullback(g, d, x)[3]
# time: 2023-07-04 21:44:50 JST
# mode: julia
	pullback(g, d, x)[2](1.0)
# time: 2023-07-04 21:44:53 JST
# mode: julia
	pullback(g, d, x)[2](1.0)[1]
# time: 2023-07-04 21:44:57 JST
# mode: julia
	pullback(g, d, x)[2](1.0)[1].weight
# time: 2023-07-04 21:45:04 JST
# mode: julia
	pullback(g, fake, x)[2](1.0)[1].weight
# time: 2023-07-04 21:45:30 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    out = f.d(x)
	    pb = ŷ -> Zygote._pullback(f.d, x)[2](ŷ) .* f.mask
	    return out, pb
	end
# time: 2023-07-04 21:45:40 JST
# mode: julia
	pullback(g, fake, x)[2](1.0)[1].weight
# time: 2023-07-04 21:45:48 JST
# mode: julia
	pullback(g, d, x)[2](1.0)[1].weight
# time: 2023-07-04 21:50:11 JST
# mode: julia
	hook(f, x) = x
# time: 2023-07-04 21:50:32 JST
# mode: julia
	@adjoint hook(f, x) = x, x̂ -> (nothing, f(x̂))
# time: 2023-07-04 21:50:38 JST
# mode: julia
	Zygote.@adjoint hook(f, x) = x, x̂ -> (nothing, f(x̂))
# time: 2023-07-04 21:51:01 JST
# mode: julia
	Flux.gradient(hook, g, d, x)
# time: 2023-07-04 21:51:23 JST
# mode: julia
	zz(d, x) = hook(g(d, x))
# time: 2023-07-04 21:51:32 JST
# mode: julia
	Flux.gradient(zz, d, x)
# time: 2023-07-04 21:51:41 JST
# mode: julia
	hook(f, x) = x
# time: 2023-07-04 21:52:18 JST
# mode: julia
	zz(d, x) = hook(x -> g(d, x), x)
# time: 2023-07-04 21:52:21 JST
# mode: julia
	Flux.gradient(zz, d, x)
# time: 2023-07-04 21:52:29 JST
# mode: julia
	Flux.jacobian(zz, d, x)
# time: 2023-07-04 22:04:47 JST
# mode: julia
	hook(f, x) = x
# time: 2023-07-04 22:05:05 JST
# mode: julia
	@adjoint hook(f, x) = x, x̂ -> (nothing, f(x̂))
# time: 2023-07-04 22:05:09 JST
# mode: julia
	Zygote.@adjoint hook(f, x) = x, x̂ -> (nothing, f(x̂))
# time: 2023-07-04 22:06:35 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(-, d)(x), x)
# time: 2023-07-04 22:06:40 JST
# mode: julia
	x
# time: 2023-07-04 22:06:45 JST
# mode: julia
	Zygote.@adjoint hook(f, x) = x, x̂ -> (nothing, f(x̂))
# time: 2023-07-04 22:07:13 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(-, d)(x), x)
# time: 2023-07-04 22:07:22 JST
# mode: julia
	d
# time: 2023-07-04 22:07:32 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(-, d)(x), d, x)
# time: 2023-07-04 22:07:48 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(-, d(x)), x)
# time: 2023-07-04 22:07:53 JST
# mode: julia
	d(x)
# time: 2023-07-04 22:07:55 JST
# mode: julia
	hook(d, x)
# time: 2023-07-04 22:08:10 JST
# mode: julia
	Flux.jacobian(hook, d, x)
# time: 2023-07-04 22:08:55 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(-, d(x)), x)
# time: 2023-07-04 22:09:04 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(-, d(x)), d, x)
# time: 2023-07-04 22:09:10 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(-, d(x)), d, x)[1]
# time: 2023-07-04 22:09:13 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(-, d(x)), d, x)[2]
# time: 2023-07-04 22:09:29 JST
# mode: julia
	Flux.jacobian(d, x)[2]
# time: 2023-07-04 22:09:31 JST
# mode: julia
	Flux.jacobian(d, x)[1]
# time: 2023-07-04 22:09:45 JST
# mode: julia
	d.weight
# time: 2023-07-04 22:10:02 JST
# mode: julia
	zz(d, x) = sum(d(x))
# time: 2023-07-04 22:10:31 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(-, zz(d, x)), d, x)[2]
# time: 2023-07-04 22:10:38 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(-, zz(d, x)), d, x)
# time: 2023-07-04 22:10:41 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(-, zz(d, x)), d, x)[1]
# time: 2023-07-04 22:10:43 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(-, zz(d, x)), d, x)[2]
# time: 2023-07-04 22:10:53 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(-, zz(d, x)), d, x)[3]
# time: 2023-07-04 22:10:56 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(-, zz(d, x)), d, x)[2]
# time: 2023-07-04 22:14:56 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(x̂ -> @show(x̂), zz(d, x)), d, x)
# time: 2023-07-04 22:15:32 JST
# mode: julia
	c = Chain(Dense(3, 5, relu), Dense(5, 4, relu))
# time: 2023-07-04 22:15:47 JST
# mode: julia
	score(c, x) = sum(c, x)
# time: 2023-07-04 22:16:17 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(x̂ -> @show(x̂), score(c, x)), c, x)
# time: 2023-07-04 22:16:20 JST
# mode: julia
	c(x)
# time: 2023-07-04 22:16:25 JST
# mode: julia
	score(c, x)
# time: 2023-07-04 22:16:38 JST
# mode: julia
	x = rand(Float32, 3)
# time: 2023-07-04 22:16:39 JST
# mode: julia
	score(c, x)
# time: 2023-07-04 22:16:43 JST
# mode: julia
	c(x)
# time: 2023-07-04 22:16:51 JST
# mode: julia
	score(c, x) = sum(c(x))
# time: 2023-07-04 22:16:55 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(x̂ -> @show(x̂), score(c, x)), c, x)
# time: 2023-07-04 22:17:18 JST
# mode: julia
	Flux.@showgrad
# time: 2023-07-04 22:17:26 JST
# mode: help
	Zygote.@showgrad
# time: 2023-07-04 22:17:47 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(x̂ -> @show(x̂), score(c, x)), c, x)
# time: 2023-07-04 22:17:50 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(x̂ -> @show(x̂), score(c, x)), c, x)[1]
# time: 2023-07-04 22:17:56 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(x̂ -> @show(x̂), score(c, x)), c, x)[1][2]
# time: 2023-07-04 22:18:04 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(x̂ -> @show(x̂), score(c, x)), c, x)[1][2]]
# time: 2023-07-04 22:18:07 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(x̂ -> @show(x̂), score(c, x)), c, x)[2]
# time: 2023-07-04 22:18:29 JST
# mode: julia
	c = Chain(Dense(3, 5, relu), Dense(5, 4, relu), Dense(4, 3))
# time: 2023-07-04 22:18:31 JST
# mode: julia
	Flux.jacobian((d, x) -> hook(x̂ -> @show(x̂), score(c, x)), c, x)[2]
# time: 2023-07-04 22:25:16 JST
# mode: julia
	Flux.gradient(() -> score(c, x), Flux.params(d))
# time: 2023-07-04 22:25:24 JST
# mode: julia
	Flux.gradient(() -> score(c, x), Flux.params(d))[d.weight]
# time: 2023-07-04 22:25:30 JST
# mode: julia
	gs = Flux.gradient(() -> score(c, x), Flux.params(d))
# time: 2023-07-04 22:25:31 JST
# mode: julia
	gs
# time: 2023-07-04 22:25:37 JST
# mode: julia
	gs.grads[d.weight]
# time: 2023-07-04 22:25:39 JST
# mode: julia
	gs.grads[d]
# time: 2023-07-04 22:25:50 JST
# mode: julia
	gs.grads[c]
# time: 2023-07-04 22:26:02 JST
# mode: julia
	keys(g.params)
# time: 2023-07-04 22:26:11 JST
# mode: julia
	keys(gs.params)
# time: 2023-07-04 22:26:17 JST
# mode: julia
	keys(gs.grads)
# time: 2023-07-04 22:26:43 JST
# mode: julia
	gs.grads[c]
# time: 2023-07-04 22:26:48 JST
# mode: julia
	gs.grads[c[1]]
# time: 2023-07-04 22:26:50 JST
# mode: julia
	gs.grads[c[1].weight]
# time: 2023-07-04 22:26:55 JST
# mode: julia
	gs.grads[c]
# time: 2023-07-04 22:26:57 JST
# mode: julia
	keys(gs.grads)
# time: 2023-07-04 22:27:00 JST
# mode: julia
	c(x)
# time: 2023-07-04 22:27:01 JST
# mode: julia
	c
# time: 2023-07-04 22:27:14 JST
# mode: julia
	keys(gs.grads) |> collect
# time: 2023-07-04 22:27:24 JST
# mode: julia
	collect(keys(gs.grads)))[3]
# time: 2023-07-04 22:27:26 JST
# mode: julia
	collect(keys(gs.grads))[3]
# time: 2023-07-04 22:27:30 JST
# mode: julia
	collect(keys(gs.grads))[2]
# time: 2023-07-04 22:27:32 JST
# mode: julia
	collect(keys(gs.grads))[1]
# time: 2023-07-04 22:27:34 JST
# mode: julia
	collect(keys(gs.grads))[3]
# time: 2023-07-04 22:27:35 JST
# mode: julia
	collect(keys(gs.grads))[4]
# time: 2023-07-04 22:27:51 JST
# mode: julia
	gs = Flux.gradient(() -> score(c, x), Flux.params(c))
# time: 2023-07-04 22:28:02 JST
# mode: julia
	gs.grads[c]
# time: 2023-07-04 22:28:05 JST
# mode: julia
	gs.grads[c[1]]
# time: 2023-07-04 22:28:07 JST
# mode: julia
	gs.grads[c[1].weight]
# time: 2023-07-04 22:50:51 JST
# mode: julia
	c = Chain(FakeDense(3, 5, relu), Dense(5, 4, relu), Dense(4, 3))
# time: 2023-07-04 22:50:58 JST
# mode: julia
	c = Chain(FakeDense(Dense(3, 5, relu)), Dense(5, 4, relu), Dense(4, 3))
# time: 2023-07-04 22:51:03 JST
# mode: julia
	c(x)
# time: 2023-07-04 22:51:08 JST
# mode: julia
	gs = Flux.gradient(() -> score(c, x), Flux.params(c))
# time: 2023-07-04 22:56:55 JST
# mode: julia
	FakeDense(f::FakeDense) = f
# time: 2023-07-04 22:56:58 JST
# mode: julia
	gs = Flux.gradient(() -> score(c, x), Flux.params(c))
# time: 2023-07-04 22:57:08 JST
# mode: julia
	Flux.gradient(score, c, x)
# time: 2023-07-04 23:35:20 JST
# mode: julia
	exit()
# time: 2023-07-04 23:35:26 JST
# mode: julia
	using Flux, Zygote
# time: 2023-07-04 23:35:37 JST
# mode: julia
	d = Dense(3, 5)
# time: 2023-07-04 23:35:47 JST
# mode: julia
	f(d, x) = sum(d(x))
# time: 2023-07-04 23:35:56 JST
# mode: julia
	Flux.gradient(d, rand(3))
# time: 2023-07-04 23:36:04 JST
# mode: julia
	Flux.gradient(d, rand(Float32, 3))
# time: 2023-07-04 23:36:09 JST
# mode: julia
	Flux.gradient(f, d, rand(Float32, 3))
# time: 2023-07-04 23:36:14 JST
# mode: julia
	Flux.gradient(f, d, rand(Float32, 3))[1]
# time: 2023-07-04 23:36:17 JST
# mode: julia
	Flux.gradient(f, d, rand(Float32, 3))[1][1]
# time: 2023-07-04 23:36:26 JST
# mode: julia
	Flux.gradient(f, d, rand(Float32, 3))[2]
# time: 2023-07-04 23:36:31 JST
# mode: julia
	Flux.gradient(f, d, rand(Float32, 3))[3]
# time: 2023-07-04 23:36:33 JST
# mode: julia
	Flux.gradient(f, d, rand(Float32, 3))[1]
# time: 2023-07-04 23:36:44 JST
# mode: julia
	Flux.pullback(f, d, rand(Float32, 3))
# time: 2023-07-04 23:36:52 JST
# mode: julia
	x = rand(Float32, 3)
# time: 2023-07-04 23:36:56 JST
# mode: julia
	Flux.gradient(f, d, rand(Float32, 3))[2]
# time: 2023-07-04 23:36:59 JST
# mode: julia
	Flux.gradient(f, d, rand(Float32, 3))[1][2]
# time: 2023-07-04 23:37:07 JST
# mode: julia
	Flux.gradient(f, d, x)[1][2]
# time: 2023-07-04 23:37:10 JST
# mode: julia
	Flux.gradient(f, d, x)[1]
# time: 2023-07-04 23:37:12 JST
# mode: julia
	Flux.gradient(f, d, x)[1][1]
# time: 2023-07-04 23:37:25 JST
# mode: julia
	Flux.pullback(f, d, x)
# time: 2023-07-04 23:37:30 JST
# mode: julia
	f(d, x)
# time: 2023-07-04 23:37:33 JST
# mode: julia
	Flux.pullback(f, d, x)[1]
# time: 2023-07-04 23:37:35 JST
# mode: julia
	Flux.pullback(f, d, x)[2]
# time: 2023-07-04 23:37:39 JST
# mode: julia
	Flux.pullback(f, d, x)[2](1.0)
# time: 2023-07-04 23:42:27 JST
# mode: julia
	Flux.pullback(f, d, x)[2]
# time: 2023-07-04 23:42:30 JST
# mode: julia
	Flux.pullback(f, d, x)[2](1.0)
# time: 2023-07-04 23:43:06 JST
# mode: julia
	d = Chain(Dense(3, 5, relu), Dense(5, 4))
# time: 2023-07-04 23:43:08 JST
# mode: julia
	Flux.pullback(f, d, x)[2](1.0)
# time: 2023-07-04 23:43:22 JST
# mode: julia
	Flux.pullback(f, d, x)[2](1.0)[1]
# time: 2023-07-04 23:43:25 JST
# mode: julia
	Flux.pullback(f, d, x)[2](1.0)[1][1]
# time: 2023-07-04 23:43:27 JST
# mode: julia
	Flux.pullback(f, d, x)[2](1.0)[1][1][1]
# time: 2023-07-04 23:43:28 JST
# mode: julia
	Flux.pullback(f, d, x)[2](1.0)[1][1][1][1]
# time: 2023-07-04 23:43:35 JST
# mode: julia
	Flux.pullback(f, d, x)[2](1.0)[2][1][1][1]
# time: 2023-07-04 23:43:38 JST
# mode: julia
	Flux.pullback(f, d, x)[2](1.0)[1][2][1][1]
# time: 2023-07-04 23:43:42 JST
# mode: julia
	Flux.pullback(f, d, x)[2](1.0)[1][1][2][1]
# time: 2023-07-04 23:43:55 JST
# mode: julia
	Flux.pullback(f, d, x)[2](1.0)[1][1][3][1]
# time: 2023-07-04 23:43:57 JST
# mode: julia
	Flux.pullback(f, d, x)[2](1.0)[1][1][2][2]
# time: 2023-07-04 23:43:58 JST
# mode: julia
	Flux.pullback(f, d, x)[2](1.0)[1][1][2][1]
# time: 2023-07-04 23:48:21 JST
# mode: julia
	f(x) = exp(sin(sin(x)))
# time: 2023-07-04 23:48:21 JST
# mode: julia
	f(2.0)
# time: 2023-07-04 23:48:21 JST
# mode: julia
	f_prime(x) = exp(sin(sin(x))) * cos(sin(x)) * cos(x)
# time: 2023-07-04 23:48:21 JST
# mode: julia
	f_prime(2.0)
# time: 2023-07-04 23:48:21 JST
# mode: julia
	(f(2.0 + 1e-8) - f(2.0)) / 1e-8
# time: 2023-07-04 23:48:21 JST
# mode: julia
	function backprop_rule(::typeof(sin), x)
	    y = sin(x)
	
	    function sin_pullback(y_cotangent)
	        x_cotangent = y_cotangent * cos(x)
	        return x_cotangent
	    end
	
	    return y, sin_pullback
	end
# time: 2023-07-04 23:48:21 JST
# mode: julia
	function backprop_rule(::typeof(exp), x)
	    y = exp(x)
	
	    function exp_pullback(y_cotangent)
	        x_cotangent = y_cotangent * y
	        return x_cotangent
	    end
	
	    return y, exp_pullback
	end
# time: 2023-07-04 23:48:21 JST
# mode: julia
	function vjp(chain, primal)
	    pullback_stack = []
	    current_value = primal
	
	    # Primal Pass
	    for operation in chain
	        current_value, current_pullback = backprop_rule(operation, current_value)
	        push!(pullback_stack, current_pullback)
	    end
	
	    function pullback(cotangent)
	        current_cotangent = cotangent
	        for back in reverse(pullback_stack)
	            current_cotangent = back(current_cotangent)
	        end
	        return current_cotangent
	    end
	
	    return current_value, pullback
	end
# time: 2023-07-04 23:48:21 JST
# mode: julia
	out, back = vjp([sin, sin, exp], 2.0)
# time: 2023-07-04 23:48:21 JST
# mode: julia
	back(1.0)
# time: 2023-07-04 23:48:21 JST
# mode: julia
	function val_and_grad(chain, x)
	    y, pullback = vjp(chain, x)
	    derivative = pullback(1.0)
	    return y, derivative
	end
# time: 2023-07-04 23:48:21 JST
# mode: julia
	val_and_grad([sin, sin, exp], 2.0)
# time: 2023-07-04 23:48:23 JST
# mode: julia
	f(2.0), f_prime(2.0)
# time: 2023-07-04 23:49:06 JST
# mode: julia
	function vjp(chain, primal)
	    pullback_stack = []
	    current_value = primal
	
	    # Primal Pass
	    for operation in chain
	        current_value, current_pullback = backprop_rule(operation, current_value)
	        push!(pullback_stack, current_pullback)
	    end
	
	    function pullback(cotangent)
	        current_cotangent = cotangent
	        for back in reverse(pullback_stack)
	            println(current_cotangent)
	            current_cotangent = back(current_cotangent)
	            
	        end
	        return current_cotangent
	    end
	
	    return current_value, pullback
	end
# time: 2023-07-04 23:49:07 JST
# mode: julia
	f(2.0), f_prime(2.0)
# time: 2023-07-04 23:49:12 JST
# mode: julia
	val_and_grad([sin, sin, exp], 2.0)
# time: 2023-07-04 23:49:14 JST
# mode: julia
	f(2.0), f_prime(2.0)
# time: 2023-07-04 23:49:26 JST
# mode: julia
	function val_and_grad(chain, x)
	    y, pullback = vjp(chain, x)
	    derivative = pullback(1.0)
	    return y, derivative
	end
# time: 2023-07-04 23:49:28 JST
# mode: julia
	f(2.0), f_prime(2.0)
# time: 2023-07-04 23:49:57 JST
# mode: julia
	function vjp(chain, primal)
	    pullback_stack = []
	    current_value = primal
	
	    # Primal Pass
	    for operation in chain
	        current_value, current_pullback = backprop_rule(operation, current_value)
	        push!(pullback_stack, current_pullback)
	    end
	
	    function pullback(cotangent)
	        current_cotangent = cotangent
	        for back in reverse(pullback_stack)
	            println("YO ", current_cotangent)
	            current_cotangent = back(current_cotangent)
	            
	        end
	        return current_cotangent
	    end
	
	    return current_value, pullback
	end
# time: 2023-07-04 23:50:00 JST
# mode: julia
	f(2.0), f_prime(2.0)
# time: 2023-07-04 23:50:13 JST
# mode: julia
	function backprop_rule(::typeof(exp), x)
	    y = exp(x)
	
	    function exp_pullback(y_cotangent)
	        x_cotangent = y_cotangent * y
	        return x_cotangent
	    end
	
	    return y, exp_pullback
	end
# time: 2023-07-04 23:50:21 JST
# mode: julia
	f_prime(x) = exp(sin(sin(x))) * cos(sin(x)) * cos(x)
# time: 2023-07-04 23:50:24 JST
# mode: julia
	f(2.0), f_prime(2.0)
# time: 2023-07-04 23:50:35 JST
# mode: julia
	function vjp(chain, primal)
	    pullback_stack = []
	    current_value = primal
	
	    # Primal Pass
	    for operation in chain
	        current_value, current_pullback = backprop_rule(operation, current_value)
	        push!(pullback_stack, current_pullback)
	    end
	
	    function pullback(cotangent)
	        current_cotangent = cotangent
	        for back in reverse(pullback_stack)
	            println("YO ", current_cotangent)
	            current_cotangent = back(current_cotangent)
	            
	        end
	        return current_cotangent
	    end
	
	    return current_value, pullback
	end
# time: 2023-07-04 23:50:43 JST
# mode: julia
	function vjp(chain, primal)
	    pullback_stack = []
	    current_value = primal
	
	    # Primal Pass
	    for operation in chain
	        current_value, current_pullback = backprop_rule(operation, current_value)
	        println("YOYOYO")
	        push!(pullback_stack, current_pullback)
	    end
	
	    function pullback(cotangent)
	        current_cotangent = cotangent
	        for back in reverse(pullback_stack)
	            println("YO ", current_cotangent)
	            current_cotangent = back(current_cotangent)
	            
	        end
	        return current_cotangent
	    end
	
	    return current_value, pullback
	end
# time: 2023-07-04 23:50:59 JST
# mode: julia
	val_and_grad([sin, sin, exp], 2.0)
# time: 2023-07-05 00:13:17 JST
# mode: julia
	struct FakeDense
	    d::Dense
	    orig
	    mask
	end
# time: 2023-07-05 00:13:17 JST
# mode: julia
	(f::FakeDense)(x) = (f.d.weight .*= f.mask; f.d(x))
# time: 2023-07-05 00:13:19 JST
# mode: julia
	function FakeDense(d::Dense)
	    orig = copy(d.weight)
	    mask = similar(orig, Bool) .= true
	    FakeDense(d, orig, mask)
	end
# time: 2023-07-05 00:13:34 JST
# mode: julia
	c = Chain(Dense(3, 5), Dense(5, 4))
# time: 2023-07-05 00:13:42 JST
# mode: julia
	f(c, x) = sum(c(x))
# time: 2023-07-05 00:13:44 JST
# mode: julia
	x = rand(Float32, 3)
# time: 2023-07-05 00:13:47 JST
# mode: julia
	c(x)
# time: 2023-07-05 00:13:49 JST
# mode: julia
	f(c, x)
# time: 2023-07-05 00:13:59 JST
# mode: julia
	Flux.gradient(f, c, x)
# time: 2023-07-05 00:14:05 JST
# mode: julia
	Flux.pullback
# time: 2023-07-05 00:14:07 JST
# mode: julia
	Flux.pullback(f, c, x)
# time: 2023-07-05 00:14:10 JST
# mode: julia
	Flux.pullback(f, c, x)[1]
# time: 2023-07-05 00:14:13 JST
# mode: julia
	Flux.pullback(f, c, x)[2]
# time: 2023-07-05 00:14:16 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)
# time: 2023-07-05 00:15:37 JST
# mode: julia
	hook(f, x) = x
# time: 2023-07-05 00:15:57 JST
# mode: julia
	Zygote.@adjont hook(f, x) = x, x̂ -> (nothing, f(x̂))
# time: 2023-07-05 00:16:02 JST
# mode: julia
	Zygote.@adjoint hook(f, x) = x, x̂ -> (nothing, f(x̂))
# time: 2023-07-05 00:16:19 JST
# mode: julia
	c
# time: 2023-07-05 00:16:58 JST
# mode: julia
	test = Chain((x)->hook(-, c[1])(x), c[2])
# time: 2023-07-05 00:17:01 JST
# mode: julia
	test(x)
# time: 2023-07-05 00:17:06 JST
# mode: julia
	c(x)
# time: 2023-07-05 00:17:15 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)
# time: 2023-07-05 00:17:19 JST
# mode: julia
	Flux.pullback(f, test, x)[2](1.0)
# time: 2023-07-05 00:17:36 JST
# mode: julia
	Zygote.@adjoint hook(f, x) = x, x̂ -> (nothing, f(x̂))
# time: 2023-07-05 00:18:35 JST
# mode: julia
	test = Chain((x)->c[1](hook(-, x)), c[2])
# time: 2023-07-05 00:18:39 JST
# mode: julia
	test(x)
# time: 2023-07-05 00:18:41 JST
# mode: julia
	c(x)
# time: 2023-07-05 00:18:45 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)
# time: 2023-07-05 00:18:47 JST
# mode: julia
	Flux.pullback(f, test, x)[2](1.0)
# time: 2023-07-05 00:18:56 JST
# mode: julia
	Flux.pullback(f, test, x)[2](1.0)[1]
# time: 2023-07-05 00:18:58 JST
# mode: julia
	Flux.pullback(f, test, x)[2](1.0)[1][1]
# time: 2023-07-05 00:18:59 JST
# mode: julia
	Flux.pullback(f, test, x)[2](1.0)[1][1][1]
# time: 2023-07-05 00:19:02 JST
# mode: julia
	Flux.pullback(f, test, x)[2](1.0)[1][1][2]
# time: 2023-07-05 00:19:03 JST
# mode: julia
	Flux.pullback(f, test, x)[2](1.0)[1][1][2][1]
# time: 2023-07-05 00:19:08 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)[1][1][2][1]
# time: 2023-07-05 00:19:20 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)[1][1][3][1]
# time: 2023-07-05 00:19:22 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)[1][1][2][1]
# time: 2023-07-05 00:19:24 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)[2][1][2][1]
# time: 2023-07-05 00:19:28 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)[1][2][2][1]
# time: 2023-07-05 00:19:33 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)
# time: 2023-07-05 00:19:35 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)[1]
# time: 2023-07-05 00:19:38 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)[2]
# time: 2023-07-05 00:19:40 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)[1]
# time: 2023-07-05 00:19:58 JST
# mode: julia
	test = Chain(c[1], (x)->hook(-, c[2])(x))
# time: 2023-07-05 00:20:03 JST
# mode: julia
	c(x)
# time: 2023-07-05 00:20:04 JST
# mode: julia
	test(x)
# time: 2023-07-05 00:20:08 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)[1]
# time: 2023-07-05 00:20:12 JST
# mode: julia
	Flux.pullback(f, test, x)[2](1.0)[1]
# time: 2023-07-05 00:20:32 JST
# mode: julia
	test = Chain(c[1], (x)->c[2](hook(-, x)))
# time: 2023-07-05 00:20:35 JST
# mode: julia
	test(x)
# time: 2023-07-05 00:20:37 JST
# mode: julia
	c(x)
# time: 2023-07-05 00:20:39 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)[1]
# time: 2023-07-05 00:20:41 JST
# mode: julia
	Flux.pullback(f, test, x)[2](1.0)[1]
# time: 2023-07-05 00:23:44 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    out = f.d(x)
	    pb = ŷ -> (out, f.mask .* f.d(ŷ))
	    out, pb
	end
# time: 2023-07-05 00:23:51 JST
# mode: julia
	c
# time: 2023-07-05 00:24:07 JST
# mode: julia
	D = Chain(FakeDense(c[1]), FakeDense(c[2]))
# time: 2023-07-05 00:24:10 JST
# mode: julia
	D(x)
# time: 2023-07-05 00:24:14 JST
# mode: julia
	c(x)
# time: 2023-07-05 00:24:21 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)[1]
# time: 2023-07-05 00:24:23 JST
# mode: julia
	Flux.pullback(f, d, x)[2](1.0)[1]
# time: 2023-07-05 00:24:39 JST
# mode: julia
	Flux.pullback(f, d, x)
# time: 2023-07-05 00:24:41 JST
# mode: julia
	Flux.pullback(f, d, x)[2]
# time: 2023-07-05 00:24:44 JST
# mode: julia
	Flux.pullback(f, d, x)[2](1.0)
# time: 2023-07-05 00:24:52 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)[1]
# time: 2023-07-05 00:25:19 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)
# time: 2023-07-05 00:25:23 JST
# mode: julia
	D(x)
# time: 2023-07-05 00:25:25 JST
# mode: julia
	c(x)
# time: 2023-07-05 00:25:27 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)
# time: 2023-07-05 00:26:40 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    
	    pb = ŷ -> (nothing, f.mask .* f.d(ŷ))
	    x, pb
	end
# time: 2023-07-05 00:26:41 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)
# time: 2023-07-05 00:27:05 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    
	    pb = ŷ -> (nothing, f.mask .* ŷ)
	    x, pb
	end
# time: 2023-07-05 00:27:07 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)
# time: 2023-07-05 00:27:32 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    
	    pb = ŷ -> (nothing, f.mask' .* f.d(ŷ))
	    x, pb
	end
# time: 2023-07-05 00:27:33 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)
# time: 2023-07-05 00:27:35 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    
	    pb = ŷ -> (nothing, f.mask' .* f.d(ŷ))
	    x, pb
	end
# time: 2023-07-05 00:28:04 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = ŷ -> (nothing, f.mask' .* f.d(ŷ))
	    x, pb
	end
# time: 2023-07-05 00:28:06 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)
# time: 2023-07-05 00:28:07 JST
# mode: julia
	x
# time: 2023-07-05 00:28:37 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = ŷ -> (println("TEST ", ŷ); (nothing, f.mask' .* f.d(ŷ))
	    x, pb
	end
# time: 2023-07-05 00:28:42 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = ŷ -> (println("TEST ", ŷ); (nothing, f.mask' .* f.d(ŷ)))
	    x, pb
	end
# time: 2023-07-05 00:28:46 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)
# time: 2023-07-05 00:28:53 JST
# mode: julia
	f(D, x)
# time: 2023-07-05 00:28:56 JST
# mode: julia
	f(c, x)
# time: 2023-07-05 00:29:00 JST
# mode: julia
	Flux.pullback(f, D, x)
# time: 2023-07-05 00:29:03 JST
# mode: julia
	Flux.pullback(f, D, x)[1]
# time: 2023-07-05 00:29:05 JST
# mode: julia
	Flux.pullback(f, D, x)[2]
# time: 2023-07-05 00:29:11 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)
# time: 2023-07-05 00:29:46 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = ŷ -> (println("TEST ", ŷ); (nothing, f.d(ŷ)))
	    x, pb
	end
# time: 2023-07-05 00:29:49 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)
# time: 2023-07-05 00:29:56 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = ŷ -> (println("TEST ", ŷ); (nothing, f.d(ŷ)))
	    x, pb
	end
# time: 2023-07-05 00:30:15 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = ŷ -> (println("TEST ", ŷ); (nothing, -ŷ))
	    x, pb
	end
# time: 2023-07-05 00:30:17 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)
# time: 2023-07-05 00:30:24 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)
# time: 2023-07-05 00:30:27 JST
# mode: julia
	Flux.pullback(f, test, x)[2](1.0)
# time: 2023-07-05 00:30:47 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = ŷ -> (println("TEST ", ŷ); (nothing, -ŷ))
	    f.d(x), pb
	end
# time: 2023-07-05 00:30:48 JST
# mode: julia
	Flux.pullback(f, test, x)[2](1.0)
# time: 2023-07-05 00:30:54 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)
# time: 2023-07-05 00:31:06 JST
# mode: julia
	D(x)
# time: 2023-07-05 00:31:09 JST
# mode: julia
	c(x)
# time: 2023-07-05 00:31:11 JST
# mode: julia
	test(x)
# time: 2023-07-05 00:32:23 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = ŷ -> (println("TEST ", ŷ); (nothing, -ŷ))
	    x, ŷ->(nothing, -ŷ)
	end
# time: 2023-07-05 00:32:26 JST
# mode: julia
	D(x)
# time: 2023-07-05 00:32:30 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)
# time: 2023-07-05 00:32:35 JST
# mode: julia
	D
# time: 2023-07-05 00:32:46 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)
# time: 2023-07-05 00:32:50 JST
# mode: julia
	Flux.pullback(f, test, x)[2](1.0)
# time: 2023-07-05 00:33:01 JST
# mode: julia
	Flux.pullback(f, test, x)[2](1.0)[1]
# time: 2023-07-05 00:33:04 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)[1]
# time: 2023-07-05 00:34:00 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    x, ŷ -> (nothing, -ŷ)
	end
# time: 2023-07-05 00:34:03 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)[1]
# time: 2023-07-05 00:34:06 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)[1]
# time: 2023-07-05 00:34:11 JST
# mode: julia
	D = Chain(c[1], FakeDense(c[2]))
# time: 2023-07-05 00:34:14 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)[1]
# time: 2023-07-05 00:34:24 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)
# time: 2023-07-05 00:34:28 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)
# time: 2023-07-05 00:34:45 JST
# mode: julia
	@Functor FakeDense
# time: 2023-07-05 00:34:49 JST
# mode: julia
	Flux.@Functor FakeDense
# time: 2023-07-05 00:34:52 JST
# mode: julia
	Flux.@functor FakeDense
# time: 2023-07-05 00:34:59 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)
# time: 2023-07-05 00:35:06 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)
# time: 2023-07-05 00:35:23 JST
# mode: julia
	f(c, x)
# time: 2023-07-05 00:35:27 JST
# mode: julia
	f(D, x)
# time: 2023-07-05 00:35:51 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    F.d(x), ŷ -> (nothing, -ŷ)
	end
# time: 2023-07-05 00:35:56 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    f.d(x), ŷ -> (nothing, -ŷ)
	end
# time: 2023-07-05 00:36:05 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)
# time: 2023-07-05 00:36:08 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)
# time: 2023-07-05 00:36:23 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    f.d(x), ŷ -> (nothing, -ŷ)
	end
# time: 2023-07-05 00:36:28 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)
# time: 2023-07-05 00:36:30 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)
# time: 2023-07-05 00:36:56 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    x, ŷ -> (nothing, -ŷ)
	end
# time: 2023-07-05 00:36:58 JST
# mode: julia
	Flux.pullback(f, D, x)[2](1.0)
# time: 2023-07-05 00:37:01 JST
# mode: julia
	Flux.pullback(f, c, x)[2](1.0)
# time: 2023-07-05 00:37:05 JST
# mode: julia
	Flux.pullback(f, test,  x)[2](1.0)
# time: 2023-07-05 00:37:10 JST
# mode: julia
	test = Chain(c[1], (x)->c[2](hook(-, x)))
# time: 2023-07-05 00:37:11 JST
# mode: julia
	Flux.pullback(f, test,  x)[2](1.0)
# time: 2023-07-05 00:37:15 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:37:18 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)[1]
# time: 2023-07-05 00:37:20 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)[1][1]
# time: 2023-07-05 00:37:26 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)[1][1][1]
# time: 2023-07-05 00:37:28 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)[1][1][1][1]
# time: 2023-07-05 00:37:32 JST
# mode: julia
	Flux.pullback(f, test,  x)[2](1.0)[1][1][1][1]
# time: 2023-07-05 00:38:09 JST
# mode: julia
	Flux.pullback(f, test,  x)[2](1.0)[1][2][1][1]
# time: 2023-07-05 00:38:12 JST
# mode: julia
	Flux.pullback(f, test,  x)[2](1.0)[1][1][1][1]
# time: 2023-07-05 00:38:15 JST
# mode: julia
	Flux.pullback(f, test,  x)[2](1.0)[1]
# time: 2023-07-05 00:38:18 JST
# mode: julia
	Flux.pullback(f, test,  x)[2](1.0)[2]
# time: 2023-07-05 00:38:19 JST
# mode: julia
	Flux.pullback(f, test,  x)[2](1.0)[3]
# time: 2023-07-05 00:38:21 JST
# mode: julia
	Flux.pullback(f, test,  x)[2](1.0)[2]
# time: 2023-07-05 00:38:22 JST
# mode: julia
	Flux.pullback(f, test,  x)[2](1.0)[1]
# time: 2023-07-05 00:38:24 JST
# mode: julia
	Flux.pullback(f, test,  x)[2](1.0)[1][2]
# time: 2023-07-05 00:39:13 JST
# mode: julia
	Flux.trainable(d::FakeDense) = (d.d,)
# time: 2023-07-05 00:39:21 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:39:24 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)
# time: 2023-07-05 00:39:49 JST
# mode: julia
	Flux.trainable(d::FakeDense) = Flux.trainable(d.d)
# time: 2023-07-05 00:39:52 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:39:54 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)
# time: 2023-07-05 00:40:26 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    f.d(x), ŷ -> (nothing, ŷ .+ 1)
	end
# time: 2023-07-05 00:40:29 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:40:47 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    x, ŷ -> (nothing, ŷ .+ 1)
	end
# time: 2023-07-05 00:40:48 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:40:54 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)
# time: 2023-07-05 00:41:00 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    x + 1, ŷ -> (nothing, ŷ .+ 1)
	end
# time: 2023-07-05 00:41:06 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    x, ŷ -> (nothing, ŷ)
	end
# time: 2023-07-05 00:41:09 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)
# time: 2023-07-05 00:41:11 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:41:40 JST
# mode: julia
	D
# time: 2023-07-05 00:41:56 JST
# mode: julia
	Flux.trianable(D)
# time: 2023-07-05 00:42:01 JST
# mode: julia
	Flux.trainable(D)
# time: 2023-07-05 00:42:25 JST
# mode: julia
	D = Chain(c[1], FakeDense(c[2]))
# time: 2023-07-05 00:42:26 JST
# mode: julia
	Flux.trainable(D)
# time: 2023-07-05 00:42:31 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:42:34 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)
# time: 2023-07-05 00:42:42 JST
# mode: julia
	Flux.trainable(c)
# time: 2023-07-05 00:42:59 JST
# mode: julia
	Flux.trainable(FakeDense(c[1]))
# time: 2023-07-05 00:43:05 JST
# mode: julia
	Flux.trainable(c[1])
# time: 2023-07-05 00:43:18 JST
# mode: julia
	Flux.trainable(D)
# time: 2023-07-05 00:43:32 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:45:51 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = ŷ -> Zygote._pullback(f.d, x)[2](ŷ)
	    x, ŷ -> (nothing, -pb(y))
	end
# time: 2023-07-05 00:45:53 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:46:02 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = ŷ -> Zygote._pullback(f.d, x)[2](ŷ)
	    x, ŷ -> (nothing, -pb(ŷ))
	end
# time: 2023-07-05 00:46:03 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:47:09 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = Zygote._pullback(f.d, x)[2]
	    x, ŷ -> (nothing, -pb(ŷ))
	end
# time: 2023-07-05 00:47:11 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:47:44 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = Zygote._pullback(f.d, x)[2]
	    f.d(x), ŷ -> (nothing, -pb(ŷ))
	end
# time: 2023-07-05 00:47:46 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:47:59 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = Zygote._pullback(f.d, x)[2]
	    f.d(x), ŷ -> (nothing, -pb(ŷ)[2])
	end
# time: 2023-07-05 00:48:00 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:48:05 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)
# time: 2023-07-05 00:48:29 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = Zygote._pullback(f.d, x)[2]
	    f.d(x), ŷ -> (nothing, f.mask .* pb(ŷ)[2])
	end
# time: 2023-07-05 00:48:31 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)
# time: 2023-07-05 00:48:35 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:48:56 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = Zygote._pullback(f.d, x)[2]
	    f.d(x), ŷ -> (nothing, pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 00:48:56 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:49:09 JST
# mode: julia
	D
# time: 2023-07-05 00:49:19 JST
# mode: julia
	D[2].mask[1, 1] = false
# time: 2023-07-05 00:49:24 JST
# mode: julia
	D[2].mask[2, 2] = false
# time: 2023-07-05 00:49:32 JST
# mode: julia
	f(c, x)
# time: 2023-07-05 00:49:35 JST
# mode: julia
	f(D, x)
# time: 2023-07-05 00:49:39 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:49:45 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)[1]
# time: 2023-07-05 00:49:47 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)[1][1]
# time: 2023-07-05 00:49:49 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)[1][1][1]
# time: 2023-07-05 00:49:50 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)[1][1][1][1]
# time: 2023-07-05 00:49:54 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)[1][2][1][1]
# time: 2023-07-05 00:49:59 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)[1]
# time: 2023-07-05 00:50:02 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)[1][1]
# time: 2023-07-05 00:50:09 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:50:12 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)
# time: 2023-07-05 00:50:57 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    out, pb = Zygote._pullback(f.d, x)
	    out, ŷ -> (nothing, pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 00:50:59 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:51:03 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)
# time: 2023-07-05 00:51:16 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)[1]
# time: 2023-07-05 00:51:20 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)[1][1]
# time: 2023-07-05 00:51:24 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)[1][2]
# time: 2023-07-05 00:51:27 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)[1][1]
# time: 2023-07-05 00:51:30 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)[1][1][1]
# time: 2023-07-05 00:51:32 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)[1][1][2]
# time: 2023-07-05 00:51:36 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)[1][1][2][1]
# time: 2023-07-05 00:51:44 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)[1][1][2][1]
# time: 2023-07-05 00:51:46 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)[1][1][1][1]
# time: 2023-07-05 00:51:50 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)[1][1][1][1]
# time: 2023-07-05 00:52:23 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = Zygote._pullback(f.d, x)[2]
	    f.d(x), ŷ -> (f.d(x), pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 00:52:25 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)[1][1][1][1]
# time: 2023-07-05 00:52:29 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)[1][1][1][1]
# time: 2023-07-05 00:52:32 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)
# time: 2023-07-05 00:52:34 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)[1]
# time: 2023-07-05 00:52:39 JST
# mode: julia
	Flux.pullback(f, c,  x)[2](1.0)[1]
# time: 2023-07-05 00:53:08 JST
# mode: julia
	Flux.trainable(D)
# time: 2023-07-05 00:53:14 JST
# mode: julia
	Flux.trainable(c)
# time: 2023-07-05 00:53:17 JST
# mode: julia
	Flux.trainable(test)
# time: 2023-07-05 00:53:27 JST
# mode: julia
	Flux.pullback(f, test,  x)[2](1.0)[1]
# time: 2023-07-05 01:04:32 JST
# mode: julia
	TT = deepcopy(test)
# time: 2023-07-05 01:04:34 JST
# mode: julia
	TT(x)
# time: 2023-07-05 01:04:35 JST
# mode: julia
	t(x)
# time: 2023-07-05 01:04:42 JST
# mode: julia
	test(x)
# time: 2023-07-05 01:05:37 JST
# mode: julia
	gs = Flux.gradient(() -> f(test(x)), Flux.params(test))
# time: 2023-07-05 01:05:47 JST
# mode: julia
	test(x)
# time: 2023-07-05 01:05:55 JST
# mode: julia
	f(test, x)
# time: 2023-07-05 01:06:02 JST
# mode: julia
	gs = Flux.gradient(() -> f(test, x), Flux.params(test))
# time: 2023-07-05 01:06:08 JST
# mode: julia
	Flux.params(test)
# time: 2023-07-05 01:06:12 JST
# mode: julia
	Flux.params(c)
# time: 2023-07-05 01:06:16 JST
# mode: julia
	Flux.params(D)
# time: 2023-07-05 01:06:34 JST
# mode: julia
	gs = Flux.gradient(() -> f(D, x), Flux.params(D))
# time: 2023-07-05 01:06:46 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = Zygote._pullback(f.d, x)[2]
	    f.d(x), ŷ -> (f.d(x), pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 01:06:54 JST
# mode: julia
	Flux.pullback(f, D,  x)[2](1.0)[1]
# time: 2023-07-05 01:07:02 JST
# mode: julia
	gs
# time: 2023-07-05 01:07:04 JST
# mode: julia
	gs.grads
# time: 2023-07-05 01:07:14 JST
# mode: julia
	gsc = Flux.gradient(() -> f(c, x), Flux.params(c))
# time: 2023-07-05 01:07:22 JST
# mode: julia
	gsc.grads
# time: 2023-07-05 01:07:49 JST
# mode: julia
	D[2].mask
# time: 2023-07-05 01:07:58 JST
# mode: julia
	gs.grads[D[2]]
# time: 2023-07-05 01:08:03 JST
# mode: julia
	gs.grads[D[2].d]
# time: 2023-07-05 01:08:06 JST
# mode: julia
	gs.grads[D[2]]
# time: 2023-07-05 01:08:13 JST
# mode: julia
	gs.grads[D]
# time: 2023-07-05 01:08:18 JST
# mode: julia
	gs.grads |> keys
# time: 2023-07-05 01:08:38 JST
# mode: julia
	gs.grads[D[2].d.weight]
# time: 2023-07-05 01:08:47 JST
# mode: julia
	gs.grads[D[1].d.weight]
# time: 2023-07-05 01:08:51 JST
# mode: julia
	gs.grads[D[1].weight]
# time: 2023-07-05 01:08:58 JST
# mode: julia
	gsc.grads[D[1].weight]
# time: 2023-07-05 01:09:00 JST
# mode: julia
	gsc.grads[D[2].weight]
# time: 2023-07-05 01:09:08 JST
# mode: julia
	gsc.grads[c[2].weight]
# time: 2023-07-05 01:09:10 JST
# mode: julia
	gsc.grads[c[1].weight]
# time: 2023-07-05 01:09:55 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = Zygote._pullback(f.d, x)[2]
	    f(x), ŷ -> (f.d(x), pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 01:10:03 JST
# mode: julia
	gs = Flux.gradient(() -> f(D, x), Flux.params(D))
# time: 2023-07-05 01:10:10 JST
# mode: julia
	gs.grads[D[1].d.weight]
# time: 2023-07-05 01:10:14 JST
# mode: julia
	gs.grads[D[1].weight]
# time: 2023-07-05 01:10:18 JST
# mode: julia
	gs.grads[D[2].d.weight]
# time: 2023-07-05 01:10:21 JST
# mode: julia
	gs.grads[D[2].d]
# time: 2023-07-05 01:10:53 JST
# mode: julia
	gs.grads |> keys
# time: 2023-07-05 01:10:55 JST
# mode: julia
	gs.grads |> values
# time: 2023-07-05 01:11:09 JST
# mode: julia
	gsc.grads |> keys
# time: 2023-07-05 01:11:11 JST
# mode: julia
	gs.grads |> keys
# time: 2023-07-05 01:11:27 JST
# mode: julia
	collect(keys(gs.grads))
# time: 2023-07-05 01:11:31 JST
# mode: julia
	collect(keys(gsc.grads))
# time: 2023-07-05 01:11:34 JST
# mode: julia
	collect(keys(gsc.grads))[end]
# time: 2023-07-05 01:11:37 JST
# mode: julia
	collect(keys(gs.grads))[end-1]
# time: 2023-07-05 01:11:51 JST
# mode: julia
	collect(keys(gs.grads))[end-1] === collect(keys(gsc.grads))[end]
# time: 2023-07-05 01:12:01 JST
# mode: julia
	collect(keys(gs.grads))[1] # === collect(keys(gsc.grads))[end]
# time: 2023-07-05 01:12:04 JST
# mode: julia
	collect(keys(gs.grads))[2] # === collect(keys(gsc.grads))[end]
# time: 2023-07-05 01:12:07 JST
# mode: julia
	collect(keys(gs.grads))[2] # === collect(keys(gsc.grads))[2]
# time: 2023-07-05 01:12:11 JST
# mode: julia
	collect(keys(gs.grads))[2] === collect(keys(gsc.grads))[2]
# time: 2023-07-05 01:12:22 JST
# mode: julia
	c[1].weight
# time: 2023-07-05 01:12:31 JST
# mode: julia
	c[2].weight
# time: 2023-07-05 01:12:46 JST
# mode: julia
	gs.grads[D[2].d.weight]
# time: 2023-07-05 01:12:57 JST
# mode: julia
	D[2].d.weight in gs.grads
# time: 2023-07-05 01:13:15 JST
# mode: julia
	D[2].d.weight in keys(gs)
# time: 2023-07-05 01:13:21 JST
# mode: julia
	D[2].d.weight in keys(gs.grads)
# time: 2023-07-05 01:13:27 JST
# mode: julia
	keys(gs)
# time: 2023-07-05 01:13:37 JST
# mode: julia
	gs[D[2]]
# time: 2023-07-05 01:13:44 JST
# mode: julia
	gs[D[2].d.weight]
# time: 2023-07-05 01:13:49 JST
# mode: julia
	gs[D[2].d.weight] |> typeof
# time: 2023-07-05 01:14:03 JST
# mode: julia
	values(gs)
# time: 2023-07-05 01:14:09 JST
# mode: julia
	values(gs.grads)
# time: 2023-07-05 01:14:16 JST
# mode: julia
	values(gsc.grads)
# time: 2023-07-05 01:14:40 JST
# mode: julia
	D[2].mask .|= true
# time: 2023-07-05 01:14:49 JST
# mode: julia
	gs = Flux.gradient(() -> f(D, x), Flux.params(D))
# time: 2023-07-05 01:14:51 JST
# mode: julia
	values(gsc.grads)
# time: 2023-07-05 01:14:54 JST
# mode: julia
	values(gs.grads)
# time: 2023-07-05 01:15:00 JST
# mode: julia
	D(x)
# time: 2023-07-05 01:15:02 JST
# mode: julia
	c(x)
# time: 2023-07-05 01:15:16 JST
# mode: julia
	f(D, x)
# time: 2023-07-05 01:15:19 JST
# mode: julia
	f(c, x)
# time: 2023-07-05 01:15:32 JST
# mode: julia
	Flux.params(D)
# time: 2023-07-05 01:15:34 JST
# mode: julia
	Flux.params(c)
# time: 2023-07-05 01:16:01 JST
# mode: julia
	gs[D[1]]
# time: 2023-07-05 01:16:06 JST
# mode: julia
	gs[D[1].weight]
# time: 2023-07-05 01:17:27 JST
# mode: julia
	grads = Flux.gradient(c) do f
	    f(c, x)
	end
# time: 2023-07-05 01:18:06 JST
# mode: julia
	grads = Flux.gradient(c) do m
	    f(c, x)
	end
# time: 2023-07-05 01:18:12 JST
# mode: julia
	grads = Flux.gradient(c) do m
	    result = f(c, x)
	end
# time: 2023-07-05 01:18:24 JST
# mode: julia
	grads = Flux.gradient(c) do f(c, x) end
# time: 2023-07-05 01:18:31 JST
# mode: julia
	grads = Flux.gradient(c) do
	    result = f(c, x)
	end
# time: 2023-07-05 01:19:05 JST
# mode: julia
	grads = Flux.gradient(c) do x
	    result = f(c, x)
	end
# time: 2023-07-05 01:19:12 JST
# mode: julia
	f(c, x)
# time: 2023-07-05 01:19:19 JST
# mode: julia
	grads = Flux.gradient(c) do x
	    f(c, x)
	end
# time: 2023-07-05 01:19:30 JST
# mode: julia
	Flux.gradient(c)
# time: 2023-07-05 01:30:37 JST
# mode: julia
	grads = Flux.gradient(c) do c
	    f(c, x)
	end
# time: 2023-07-05 01:30:44 JST
# mode: julia
	grads = Flux.gradient(c) do D
	    f(D, x)
	end
# time: 2023-07-05 01:30:56 JST
# mode: julia
	grads[D]
# time: 2023-07-05 01:30:59 JST
# mode: julia
	grads[D[1]]
# time: 2023-07-05 01:31:04 JST
# mode: julia
	grads
# time: 2023-07-05 01:31:05 JST
# mode: julia
	grads[1]
# time: 2023-07-05 01:31:29 JST
# mode: julia
	D[2].mask
# time: 2023-07-05 01:31:42 JST
# mode: julia
	D[2].mask .&= false
# time: 2023-07-05 01:31:58 JST
# mode: julia
	D[2].mask[1, :] # .&= false
# time: 2023-07-05 01:32:06 JST
# mode: julia
	D[2].mask[:, 1] # .&= false
# time: 2023-07-05 01:32:13 JST
# mode: julia
	D[2].mask[:, 1] .| = true
# time: 2023-07-05 01:32:16 JST
# mode: julia
	D[2].mask[:, 1] .|= true
# time: 2023-07-05 01:32:19 JST
# mode: julia
	D[2].mask[1, :] .|= true
# time: 2023-07-05 01:32:23 JST
# mode: julia
	D[2].mask
# time: 2023-07-05 01:32:28 JST
# mode: julia
	grads = Flux.gradient(c) do c
	    f(c, x)
	end
# time: 2023-07-05 01:32:33 JST
# mode: julia
	grads = Flux.gradient(c) do D
	    f(D, x)
	end
# time: 2023-07-05 01:32:41 JST
# mode: julia
	gradsc = Flux.gradient(c) do c
	    f(c, x)
	end
# time: 2023-07-05 01:32:45 JST
# mode: julia
	gradsd = Flux.gradient(c) do D
	    f(D, x)
	end
# time: 2023-07-05 01:32:49 JST
# mode: julia
	gradsc[1]
# time: 2023-07-05 01:32:51 JST
# mode: julia
	gradsc[1][1]
# time: 2023-07-05 01:32:53 JST
# mode: julia
	gradsc[1][1][1]
# time: 2023-07-05 01:32:54 JST
# mode: julia
	gradsc[1][1][1][1]
# time: 2023-07-05 01:32:56 JST
# mode: julia
	gradsd[1][1][1][1]
# time: 2023-07-05 01:33:11 JST
# mode: julia
	gradsc[2]
# time: 2023-07-05 01:33:12 JST
# mode: julia
	gradsc[1]
# time: 2023-07-05 01:33:17 JST
# mode: julia
	gradsc[1][2]
# time: 2023-07-05 01:33:18 JST
# mode: julia
	gradsc[1][1]
# time: 2023-07-05 01:33:20 JST
# mode: julia
	gradsc[1][2]
# time: 2023-07-05 01:33:23 JST
# mode: julia
	gradsc[1][1][2]
# time: 2023-07-05 01:33:24 JST
# mode: julia
	gradsc[1][1][2][1]
# time: 2023-07-05 01:33:28 JST
# mode: julia
	gradsd[1][1][2][1]
# time: 2023-07-05 01:34:11 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = Zygote._pullback(f.d, x)[2]
	    f(x), ŷ -> (f.d(x), pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 01:34:19 JST
# mode: julia
	f.d.weight
# time: 2023-07-05 01:34:25 JST
# mode: julia
	D[2].d.weight
# time: 2023-07-05 01:34:32 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = Zygote._pullback(f.d, x)[2]
	    f(x), ŷ -> (f.d(x), pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 01:34:43 JST
# mode: julia
	c[2].weight
# time: 2023-07-05 01:34:51 JST
# mode: julia
	D = deepcopy(D)
# time: 2023-07-05 01:34:55 JST
# mode: julia
	D[2]
# time: 2023-07-05 01:34:57 JST
# mode: julia
	D[2].w
# time: 2023-07-05 01:34:59 JST
# mode: julia
	D[2].d
# time: 2023-07-05 01:35:00 JST
# mode: julia
	D[2].d.w
# time: 2023-07-05 01:35:01 JST
# mode: julia
	D[2].mask
# time: 2023-07-05 01:35:05 JST
# mode: julia
	D(x)
# time: 2023-07-05 01:35:27 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = Zygote._pullback(f.d, x)[2]
	    f(x), ŷ -> (f.d(x), pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 01:35:44 JST
# mode: julia
	gradsd = Flux.gradient(c) do D
	    f(D, x)
	end
# time: 2023-07-05 01:35:53 JST
# mode: julia
	gradsc[1][1][2][1]
# time: 2023-07-05 01:35:55 JST
# mode: julia
	gradsd[1][1][2][1]
# time: 2023-07-05 01:35:59 JST
# mode: julia
	gradsd[1][1][1][1]
# time: 2023-07-05 01:36:02 JST
# mode: julia
	gradsc[1][1][1][1]
# time: 2023-07-05 01:36:14 JST
# mode: julia
	f(D, x)
# time: 2023-07-05 01:36:17 JST
# mode: julia
	f(c,  x)
# time: 2023-07-05 01:36:43 JST
# mode: julia
	using SparseArrays
# time: 2023-07-05 01:37:02 JST
# mode: julia
	S = sparse(D[2].d.weight .* D[2].mask)
# time: 2023-07-05 01:37:48 JST
# mode: julia
	S = Chain(Dense(deepcopy(c[1])), Dense(S, deepcopy(D[2].d.bias)))
# time: 2023-07-05 01:37:51 JST
# mode: julia
	S
# time: 2023-07-05 01:38:02 JST
# mode: help
	Dense
# time: 2023-07-05 01:38:17 JST
# mode: julia
	S = Chain(Dense(deepcopy(c[1])), Dense(S))
# time: 2023-07-05 01:38:27 JST
# mode: julia
	S = Chain(Dense(deepcopy(c[1].weight)), Dense(S))
# time: 2023-07-05 01:38:41 JST
# mode: julia
	S[2].bias .= c[2].bias
# time: 2023-07-05 01:38:51 JST
# mode: julia
	S[2].bias
# time: 2023-07-05 01:38:57 JST
# mode: julia
	c[2].bias
# time: 2023-07-05 01:39:00 JST
# mode: julia
	c(x)
# time: 2023-07-05 01:39:02 JST
# mode: julia
	S(x)
# time: 2023-07-05 01:39:07 JST
# mode: julia
	D(x)
# time: 2023-07-05 01:39:28 JST
# mode: julia
	gradssp = Flux.gradient(c) do S
	    f(S, x)
	end
# time: 2023-07-05 01:39:39 JST
# mode: julia
	gradsc[1][1][1][1]
# time: 2023-07-05 01:39:41 JST
# mode: julia
	gradssp[1][1][1][1]
# time: 2023-07-05 01:39:53 JST
# mode: julia
	gradssp[1][1][2][1]
# time: 2023-07-05 01:39:56 JST
# mode: julia
	gradsc[1][1][2][1]
# time: 2023-07-05 01:40:18 JST
# mode: julia
	gradsc[1][1][2][2]
# time: 2023-07-05 01:40:22 JST
# mode: julia
	gradsc[1][1][3][1]
# time: 2023-07-05 01:40:25 JST
# mode: julia
	gradsc[1][1][2][1]
# time: 2023-07-05 01:40:27 JST
# mode: julia
	gradsc[1][2][2][1]
# time: 2023-07-05 01:40:29 JST
# mode: julia
	gradsc[1]
# time: 2023-07-05 01:40:31 JST
# mode: julia
	gradsc[2]
# time: 2023-07-05 01:40:33 JST
# mode: julia
	gradsc[1]
# time: 2023-07-05 01:40:35 JST
# mode: julia
	gradsc[1][1]
# time: 2023-07-05 01:40:37 JST
# mode: julia
	gradsc[1][2]
# time: 2023-07-05 01:40:39 JST
# mode: julia
	gradsc[1][1]
# time: 2023-07-05 01:40:41 JST
# mode: julia
	gradsc[1][1][1]
# time: 2023-07-05 01:40:44 JST
# mode: julia
	gradsc[1][1][2]
# time: 2023-07-05 01:40:47 JST
# mode: julia
	gradsc[1][1][3]
# time: 2023-07-05 01:40:49 JST
# mode: julia
	gradsc[1][1][1]
# time: 2023-07-05 01:40:50 JST
# mode: julia
	gradsc[1][1][1][1]
# time: 2023-07-05 01:40:54 JST
# mode: julia
	gradsc[1][1][1][2]
# time: 2023-07-05 01:40:56 JST
# mode: julia
	gradsc[1][1][1][3]
# time: 2023-07-05 01:41:01 JST
# mode: julia
	gradsc[1][1][1][2]
# time: 2023-07-05 01:41:04 JST
# mode: julia
	gradssp[1][1][1][2]
# time: 2023-07-05 01:41:18 JST
# mode: julia
	gradssp[1][1][2][2]
# time: 2023-07-05 01:41:20 JST
# mode: julia
	gradssp[1][1][2][1]
# time: 2023-07-05 01:41:24 JST
# mode: julia
	gradsc[1][1][2][1]
# time: 2023-07-05 01:41:55 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = Zygote._pullback(f.d, x)[2]
	    f.d(x), ŷ -> (nothing, -pb(ŷ)[2])
	end
# time: 2023-07-05 01:42:04 JST
# mode: julia
	gradsd = Flux.gradient(c) do D
	    f(D, x)
	end
# time: 2023-07-05 01:42:09 JST
# mode: julia
	gradssp[1][1][2][1]
# time: 2023-07-05 01:42:11 JST
# mode: julia
	gradsd[1][1][2][1]
# time: 2023-07-05 01:42:15 JST
# mode: julia
	gradsd[1][1][1][1]
# time: 2023-07-05 01:42:18 JST
# mode: julia
	gradsc[1][1][1][1]
# time: 2023-07-05 01:43:28 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    # f.d.weight .*= f.mask
	    println("YOYOYOYO")
	    println("YO ", x)
	    pb = Zygote._pullback(f.d, x)[2]
	    f.d(x), ŷ -> (nothing, -pb(ŷ)[2])
	end
# time: 2023-07-05 01:43:46 JST
# mode: julia
	D
# time: 2023-07-05 01:43:56 JST
# mode: julia
	gradsd = Flux.gradient(c) do D
	    f(D, x)
	end
# time: 2023-07-05 01:44:13 JST
# mode: julia
	f(D, x)
# time: 2023-07-05 01:44:19 JST
# mode: julia
	gradsd = Flux.gradient(c) do D
	    sum(D(x))
	end
# time: 2023-07-05 01:44:29 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(x))
	end
# time: 2023-07-05 01:44:37 JST
# mode: julia
	gradsc[1][1][1][1]
# time: 2023-07-05 01:44:39 JST
# mode: julia
	gradsd[1][1][1][1]
# time: 2023-07-05 01:44:46 JST
# mode: julia
	gradsd[1][1][2][1]
# time: 2023-07-05 01:44:52 JST
# mode: julia
	gradsd[1][1][1][1]
# time: 2023-07-05 01:44:55 JST
# mode: julia
	grads
# time: 2023-07-05 01:45:05 JST
# mode: julia
	gradssp = Flux.gradient(S) do S
	    f(S, x)
	end
# time: 2023-07-05 01:45:12 JST
# mode: julia
	gradssp[1][1][2][1]
# time: 2023-07-05 01:45:24 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = Zygote._pullback(f.d, x)[2]
	    f(x), ŷ -> (f.d(x), pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 01:45:29 JST
# mode: julia
	gradsd = Flux.gradient(c) do D
	    sum(D(x))
	end
# time: 2023-07-05 01:45:34 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(x))
	end
# time: 2023-07-05 01:45:51 JST
# mode: julia
	gradsd[1][1][1]
# time: 2023-07-05 01:45:52 JST
# mode: julia
	gradsd[1][1][1][1]
# time: 2023-07-05 01:45:55 JST
# mode: julia
	gradssp[1][1][1][1]
# time: 2023-07-05 01:46:05 JST
# mode: julia
	D(x)
# time: 2023-07-05 01:46:07 JST
# mode: julia
	S(x)
# time: 2023-07-05 01:46:17 JST
# mode: julia
	gradssp[1][1][2][1]
# time: 2023-07-05 01:46:40 JST
# mode: julia
	gradssp[1][1][1][1]
# time: 2023-07-05 01:49:36 JST
# mode: julia
	gradssd[1][1][1][1]
# time: 2023-07-05 01:49:39 JST
# mode: julia
	gradsd[1][1][1][1]
# time: 2023-07-05 01:49:41 JST
# mode: julia
	gradsd[1][1][2][1]
# time: 2023-07-05 01:49:47 JST
# mode: julia
	gradsd
# time: 2023-07-05 01:50:03 JST
# mode: julia
	D
# time: 2023-07-05 01:50:08 JST
# mode: julia
	Flux.params(D)
# time: 2023-07-05 01:50:10 JST
# mode: julia
	Flux.params(s)
# time: 2023-07-05 01:50:12 JST
# mode: julia
	Flux.params(S)
# time: 2023-07-05 01:50:15 JST
# mode: julia
	Flux.params(c)
# time: 2023-07-05 01:50:19 JST
# mode: julia
	Flux.params(D)
# time: 2023-07-05 01:51:22 JST
# mode: julia
	Flux.@functor FakeDense
# time: 2023-07-05 01:51:24 JST
# mode: julia
	Flux.params(D)
# time: 2023-07-05 01:51:35 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(x))
	end
# time: 2023-07-05 01:51:45 JST
# mode: julia
	gradsd[1]
# time: 2023-07-05 01:51:46 JST
# mode: julia
	gradsd[1][1]
# time: 2023-07-05 01:51:49 JST
# mode: julia
	gradsd[1][1][1]
# time: 2023-07-05 01:51:51 JST
# mode: julia
	gradsd[1][1][1][1]
# time: 2023-07-05 01:51:53 JST
# mode: julia
	gradsd[1][1][2][1]
# time: 2023-07-05 01:51:57 JST
# mode: julia
	gradsd[1][1][1][1]
# time: 2023-07-05 01:52:07 JST
# mode: julia
	gradssp[1][1][1][1]
# time: 2023-07-05 01:52:12 JST
# mode: julia
	gradssp[1][1][2][1]
# time: 2023-07-05 01:52:15 JST
# mode: julia
	gradsd[1][1][1][1]
# time: 2023-07-05 01:52:49 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    pb = Zygote._pullback(f.d, x)[2]
	    f(x), ŷ -> (f(x), pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 01:52:58 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(x))
	end
# time: 2023-07-05 01:53:02 JST
# mode: julia
	gradsd[1][1][1][1]
# time: 2023-07-05 01:53:05 JST
# mode: julia
	gradssp[1][1][2][1]
# time: 2023-07-05 01:53:07 JST
# mode: julia
	gradssp[1][1][1][1]
# time: 2023-07-05 01:53:09 JST
# mode: julia
	gradsd[1][1][1][1]
# time: 2023-07-05 01:53:30 JST
# mode: julia
	gradsd[1][1][2][1]
# time: 2023-07-05 01:53:34 JST
# mode: julia
	gradssp[1][1][2][1]
# time: 2023-07-05 01:54:22 JST
# mode: julia
	Flux.trainable(D)
# time: 2023-07-05 01:54:26 JST
# mode: julia
	Flux.trainable(D[2])
# time: 2023-07-05 01:54:30 JST
# mode: julia
	Flux.trainable(c[2])
# time: 2023-07-05 01:54:34 JST
# mode: julia
	Flux.trainable(S[2])
# time: 2023-07-05 01:54:56 JST
# mode: julia
	Flux.trainable(c)
# time: 2023-07-05 01:54:59 JST
# mode: julia
	Flux.trainable(D)
# time: 2023-07-05 01:55:13 JST
# mode: julia
	Flux.trainable(S)
# time: 2023-07-05 01:55:37 JST
# mode: julia
	Flux.trainable(D)
# time: 2023-07-05 01:55:54 JST
# mode: julia
	Flux.params(S)
# time: 2023-07-05 01:55:56 JST
# mode: julia
	Flux.params(c)
# time: 2023-07-05 01:55:58 JST
# mode: julia
	Flux.params(D)
# time: 2023-07-05 01:56:17 JST
# mode: julia
	DD = deepcopy(D)
# time: 2023-07-05 01:56:27 JST
# mode: julia
	DD[2].mask .|= true
# time: 2023-07-05 01:56:44 JST
# mode: julia
	DD[2].d.weight .|= c[2].weight
# time: 2023-07-05 01:56:47 JST
# mode: julia
	DD[2].d.weight .= c[2].weight
# time: 2023-07-05 01:56:53 JST
# mode: julia
	DD(x)
# time: 2023-07-05 01:56:55 JST
# mode: julia
	c(x)
# time: 2023-07-05 01:57:02 JST
# mode: julia
	Flux.trainable(DD)
# time: 2023-07-05 01:57:06 JST
# mode: julia
	Flux.paramse(DD)
# time: 2023-07-05 01:57:08 JST
# mode: julia
	Flux.params(DD)
# time: 2023-07-05 01:57:11 JST
# mode: julia
	Flux.params(c)
# time: 2023-07-05 01:57:32 JST
# mode: julia
	gradsdd = Flux.gradient(DD) do DD
	    sum(DD(x))
	end
# time: 2023-07-05 01:57:52 JST
# mode: julia
	gradsc = Flux.gradient(c) do c
	    sum(c(x))
	end
# time: 2023-07-05 02:21:02 JST
# mode: julia
	gradsdd = Flux.gradient(DD) do DD
	    sum(DD(x))
	end
# time: 2023-07-05 02:21:36 JST
# mode: julia
	ZZZ = Chain(FakeDense(c[1]), FakeDense(c[2]))
# time: 2023-07-05 02:21:42 JST
# mode: julia
	ZZZ(x)
# time: 2023-07-05 02:21:44 JST
# mode: julia
	c(x)
# time: 2023-07-05 02:21:57 JST
# mode: julia
	gradsdd = Flux.gradient(ZZZ) do ZZZ
	    sum(ZZZ(x))
	end
# time: 2023-07-05 02:22:10 JST
# mode: julia
	gradsc = Flux.gradient(c) do c
	    sum(c(x))
	end
# time: 2023-07-05 02:23:07 JST
# mode: julia
	Flux.trainable(ZZZ)
# time: 2023-07-05 02:23:10 JST
# mode: julia
	Flux.trainable(c)
# time: 2023-07-05 02:23:16 JST
# mode: julia
	Flux.parameters(c)
# time: 2023-07-05 02:23:20 JST
# mode: julia
	Flux.params(c)
# time: 2023-07-05 02:23:22 JST
# mode: julia
	Flux.params(ZZZ)
# time: 2023-07-05 02:23:37 JST
# mode: julia
	gradsc = Flux.gradient(c) do c
	    sum(c(x))
	end
# time: 2023-07-05 02:23:48 JST
# mode: julia
	gradsc = Flux.gradient(ZZZ) do ZZZ
	    sum(ZZZ(x))
	end
# time: 2023-07-05 02:25:40 JST
# mode: julia
	Flux.@functor FakeDense (d.weight, d.bias,)
# time: 2023-07-05 02:26:34 JST
# mode: julia
	Flux.trainable(f::FakeDense) = Flux.trainable(f.d)
# time: 2023-07-05 02:26:37 JST
# mode: julia
	gradsc = Flux.gradient(ZZZ) do ZZZ
	    sum(ZZZ(x))
	end
# time: 2023-07-05 02:27:08 JST
# mode: julia
	Flux.trainable(ZZZ)
# time: 2023-07-05 02:27:12 JST
# mode: julia
	Flux.trainable(ZZZ[1])
# time: 2023-07-05 02:27:16 JST
# mode: julia
	Flux.trainable(c[1])
# time: 2023-07-05 02:27:31 JST
# mode: julia
	Flux.params(ZZZ)
# time: 2023-07-05 02:27:34 JST
# mode: julia
	Flux.params(c)
# time: 2023-07-05 02:28:30 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    println(f)
	    pb = Zygote._pullback(f.d, x)[2]
	    f(x), ŷ -> (f(x), pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:28:34 JST
# mode: julia
	gradsc = Flux.gradient(ZZZ) do ZZZ
	    sum(ZZZ(x))
	end
# time: 2023-07-05 02:28:39 JST
# mode: julia
	ZZZ
# time: 2023-07-05 02:29:12 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    pb = Zygote._pullback(f.d, x)[2]
	    f(x), ŷ -> (nothing, pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:29:14 JST
# mode: julia
	gradsc = Flux.gradient(ZZZ) do ZZZ
	    sum(ZZZ(x))
	end
# time: 2023-07-05 02:29:37 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    f(x), ŷ -> (out, pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:29:39 JST
# mode: julia
	gradsc = Flux.gradient(ZZZ) do ZZZ
	    sum(ZZZ(x))
	end
# time: 2023-07-05 02:29:50 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    out, ŷ -> (out, pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:29:51 JST
# mode: julia
	gradsc = Flux.gradient(ZZZ) do ZZZ
	    sum(ZZZ(x))
	end
# time: 2023-07-05 02:30:03 JST
# mode: julia
	gradsc = Flux.gradient(c) do c
	    sum(c(x))
	end
# time: 2023-07-05 02:30:27 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f, x)
	    out, ŷ -> (out, pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:30:29 JST
# mode: julia
	gradsc = Flux.gradient(ZZZ) do ZZZ
	    sum(ZZZ(x))
	end
# time: 2023-07-05 02:31:06 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    out, ŷ -> (out, pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:31:07 JST
# mode: julia
	gradsc = Flux.gradient(ZZZ) do ZZZ
	    sum(ZZZ(x))
	end
# time: 2023-07-05 02:32:12 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    out, pb(f.mask .* ŷ)[2]
	end
# time: 2023-07-05 02:32:14 JST
# mode: julia
	gradsc = Flux.gradient(ZZZ) do ZZZ
	    sum(ZZZ(x))
	end
# time: 2023-07-05 02:32:32 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    out, ŷ -> pb(f.mask .* ŷ)[2]
	end
# time: 2023-07-05 02:32:34 JST
# mode: julia
	gradsc = Flux.gradient(ZZZ) do ZZZ
	    sum(ZZZ(x))
	end
# time: 2023-07-05 02:33:36 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    return out, ŷ -> pb(f.mask .* ŷ)[2]
	end
# time: 2023-07-05 02:33:37 JST
# mode: julia
	gradsc = Flux.gradient(ZZZ) do ZZZ
	    sum(ZZZ(x))
	end
# time: 2023-07-05 02:34:12 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    f(x), ŷ -> (ŷ, pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:34:14 JST
# mode: julia
	gradsc = Flux.gradient(ZZZ) do ZZZ
	    sum(ZZZ(x))
	end
# time: 2023-07-05 02:34:35 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    f(x), ŷ -> (pb(ŷ), pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:34:36 JST
# mode: julia
	gradsc = Flux.gradient(ZZZ) do ZZZ
	    sum(ZZZ(x))
	end
# time: 2023-07-05 02:34:52 JST
# mode: julia
	gradsc = Flux.gradient(S) do S
	    sum(S(x))
	end
# time: 2023-07-05 02:35:01 JST
# mode: julia
	gradssp = Flux.gradient(S) do S
	    sum(S(x))
	end
# time: 2023-07-05 02:35:07 JST
# mode: julia
	gradsdd = Flux.gradient(DD) do DD
	    sum(DD(x))
	end
# time: 2023-07-05 02:35:09 JST
# mode: julia
	DD(x)
# time: 2023-07-05 02:35:11 JST
# mode: julia
	S(x)
# time: 2023-07-05 02:35:15 JST
# mode: julia
	D(x)
# time: 2023-07-05 02:35:25 JST
# mode: julia
	gradsdd = Flux.gradient(D) do D
	    sum(D(x))
	end
# time: 2023-07-05 02:35:33 JST
# mode: julia
	gradsdd[1]
# time: 2023-07-05 02:35:34 JST
# mode: julia
	gradsdd[1][1]
# time: 2023-07-05 02:35:35 JST
# mode: julia
	gradsdd[1][1][1]
# time: 2023-07-05 02:35:36 JST
# mode: julia
	gradsdd[1][1][1][1]
# time: 2023-07-05 02:35:40 JST
# mode: julia
	gradssp[1][1][1][1]
# time: 2023-07-05 02:35:46 JST
# mode: julia
	gradssp[1][1][2][1]
# time: 2023-07-05 02:35:49 JST
# mode: julia
	gradsd[1][1][2][1]
# time: 2023-07-05 02:35:54 JST
# mode: julia
	gradsd
# time: 2023-07-05 02:36:01 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(x))
	end
# time: 2023-07-05 02:36:04 JST
# mode: julia
	gradsd[1][1][2][1]
# time: 2023-07-05 02:36:10 JST
# mode: julia
	gradsp[1][1][2][1]
# time: 2023-07-05 02:36:13 JST
# mode: julia
	gradssp[1][1][2][1]
# time: 2023-07-05 02:36:16 JST
# mode: julia
	gradsp[1][1][2][1]]1\
# time: 2023-07-05 02:36:19 JST
# mode: julia
	gradsp[1][1][2][1][1]
# time: 2023-07-05 02:36:24 JST
# mode: julia
	gradssp[1][1][2][1]
# time: 2023-07-05 02:36:27 JST
# mode: julia
	gradsd[1][1][2][1]
# time: 2023-07-05 02:36:31 JST
# mode: julia
	gradsd[1][1][2][1][1]
# time: 2023-07-05 02:37:12 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    f(x), ŷ -> (pb(f.mask .* ŷ), pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:37:16 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(x))
	end
# time: 2023-07-05 02:37:19 JST
# mode: julia
	gradsd[1][1][2][1][1]
# time: 2023-07-05 02:37:32 JST
# mode: julia
	D(x)
# time: 2023-07-05 02:37:34 JST
# mode: julia
	S(x)
# time: 2023-07-05 02:37:42 JST
# mode: julia
	gradsd[1][1][2][1][1]
# time: 2023-07-05 02:37:45 JST
# mode: julia
	gradssp[1][1][2][1][1]
# time: 2023-07-05 02:37:48 JST
# mode: julia
	gradssp[1][1][2][1]
# time: 2023-07-05 02:38:33 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(x))
	end
# time: 2023-07-05 02:38:36 JST
# mode: julia
	D[2].mask
# time: 2023-07-05 02:38:50 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(x))
	end
# time: 2023-07-05 02:38:56 JST
# mode: julia
	gradssp[1][1][2][1]
# time: 2023-07-05 02:39:09 JST
# mode: julia
	gradssp = Flux.gradient(S) do S
	    sum(S(x))
	end
# time: 2023-07-05 02:39:11 JST
# mode: julia
	gradssp[1][1][2][1]
# time: 2023-07-05 02:39:22 JST
# mode: julia
	sum(S(x))
# time: 2023-07-05 02:39:25 JST
# mode: julia
	sum(D(x))
# time: 2023-07-05 02:39:28 JST
# mode: julia
	gradssp[1][1][2][1]
# time: 2023-07-05 02:39:36 JST
# mode: julia
	gradsd[1][1][2][1]
# time: 2023-07-05 02:39:50 JST
# mode: julia
	gradsd[1][1][2][1][1]
# time: 2023-07-05 02:39:57 JST
# mode: julia
	D[2].d.bias
# time: 2023-07-05 02:40:05 JST
# mode: julia
	S[2].d.bias
# time: 2023-07-05 02:40:08 JST
# mode: julia
	S[2].bias
# time: 2023-07-05 02:40:20 JST
# mode: julia
	gradssp = Flux.gradient(S) do S
	    sum(S(x))
	end
# time: 2023-07-05 02:40:29 JST
# mode: julia
	gradsd[1][1][2][1]
# time: 2023-07-05 02:40:32 JST
# mode: julia
	gradsd[1][1][1][1]
# time: 2023-07-05 02:40:42 JST
# mode: julia
	gradsp[1][1][1][1]
# time: 2023-07-05 02:40:45 JST
# mode: julia
	gradssp[1][1][1][1]
# time: 2023-07-05 02:41:01 JST
# mode: julia
	gradsd[1][1][1][1]
# time: 2023-07-05 02:41:03 JST
# mode: julia
	gradsd[1][1][2][1]
# time: 2023-07-05 02:41:05 JST
# mode: julia
	gradsd[1][1][1][1]
# time: 2023-07-05 02:41:07 JST
# mode: julia
	gradsd[1][1][1]
# time: 2023-07-05 02:41:10 JST
# mode: julia
	gradsd[1][1][2]
# time: 2023-07-05 02:41:17 JST
# mode: julia
	gradsd[1][1][1]
# time: 2023-07-05 02:41:34 JST
# mode: julia
	D[2].weight
# time: 2023-07-05 02:41:38 JST
# mode: julia
	D[2].d.weight
# time: 2023-07-05 02:41:49 JST
# mode: julia
	S[2].weight
# time: 2023-07-05 02:42:43 JST
# mode: julia
	a = rand(5)
# time: 2023-07-05 02:42:48 JST
# mode: julia
	a = rand(Float32, 5)
# time: 2023-07-05 02:42:54 JST
# mode: julia
	S[2](a)
# time: 2023-07-05 02:42:56 JST
# mode: julia
	D[2](a)
# time: 2023-07-05 02:43:03 JST
# mode: julia
	D[2](a) ≈ S[2](a)
# time: 2023-07-05 02:43:28 JST
# mode: julia
	D = Chain(FakeDense(c[2]))
# time: 2023-07-05 02:43:30 JST
# mode: julia
	D[1]
# time: 2023-07-05 02:43:41 JST
# mode: julia
	D = FakeDense(Dense(4, 5))
# time: 2023-07-05 02:43:56 JST
# mode: julia
	D.mask[1, :] .&= false
# time: 2023-07-05 02:44:20 JST
# mode: julia
	S = Dense(sparse(D.d.weight .* D.mask))
# time: 2023-07-05 02:44:24 JST
# mode: julia
	S(a)
# time: 2023-07-05 02:44:31 JST
# mode: julia
	a = rand(Float32, 4)
# time: 2023-07-05 02:44:35 JST
# mode: julia
	S(a)
# time: 2023-07-05 02:44:37 JST
# mode: julia
	D(a)
# time: 2023-07-05 02:44:44 JST
# mode: julia
	D(a) ≈ S(a)
# time: 2023-07-05 02:45:01 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:45:16 JST
# mode: julia
	gradss = Flux.gradient(S) do S
	    sum(S(a))
	end
# time: 2023-07-05 02:46:25 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    f(x), ŷ -> (pb(f.mask .* ŷ), pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:46:27 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:46:32 JST
# mode: julia
	gradsd[1]
# time: 2023-07-05 02:46:34 JST
# mode: julia
	gradsd[1][1]
# time: 2023-07-05 02:46:35 JST
# mode: julia
	gradsd[1][1][1]
# time: 2023-07-05 02:46:38 JST
# mode: julia
	gradss[1][1][1]
# time: 2023-07-05 02:46:40 JST
# mode: julia
	gradss[1][1]
# time: 2023-07-05 02:47:05 JST
# mode: julia
	S(a)
# time: 2023-07-05 02:47:06 JST
# mode: julia
	D(a)
# time: 2023-07-05 02:48:05 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    out, ŷ -> (pb(f.mask .* ŷ), pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:48:10 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:48:16 JST
# mode: julia
	gradss[1][1]
# time: 2023-07-05 02:48:20 JST
# mode: julia
	gradsd[1][1][1]
# time: 2023-07-05 02:49:04 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    f(x), ŷ -> pb(f.mask .* ŷ)
	end
# time: 2023-07-05 02:49:08 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:49:42 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    out, ŷ -> (pb(f.mask .* ŷ)[1], pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:49:44 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:49:51 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    out, ŷ -> (pb(f.mask .* ŷ), pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:49:52 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:50:17 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    println("OUT ", out)
	    out, ŷ -> (pb(f.mask .* ŷ), pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:50:22 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:51:15 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    println("OUT ", out)
	    println("pb ", pb)
	    out, ŷ -> (pb(f.mask .* ŷ), pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:51:15 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:51:58 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    out, ŷ -> pb(f.mask .* ŷ)[2]
	end
# time: 2023-07-05 02:52:00 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:52:16 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    out, ŷ -> (out, pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:52:16 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:52:31 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    out, ŷ -> (ŷ, pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:52:32 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:52:40 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    out, ŷ -> (pb(ŷ), pb(f.mask .* ŷ)[2])
	end
# time: 2023-07-05 02:52:41 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:52:47 JST
# mode: julia
	gradsd[1][1][1]
# time: 2023-07-05 02:52:52 JST
# mode: julia
	gradss[1][1]
# time: 2023-07-05 02:53:21 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    out, ŷ -> (pb(ŷ), pb(f.mask)[2])
	end
# time: 2023-07-05 02:53:24 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:53:26 JST
# mode: julia
	gradsd[1][1][1]
# time: 2023-07-05 02:53:37 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    out, ŷ -> (pb(ŷ), pb(ŷ .* f.mask)[2])
	end
# time: 2023-07-05 02:53:46 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:55:07 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    (out, ŷ -> (pb(ŷ), pb(ŷ .* f.mask)[2]))
	end
# time: 2023-07-05 02:55:08 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:55:44 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    (out, ŷ -> (pb(ŷ), pb(ŷ .* f.mask)[2]))
	end
# time: 2023-07-05 02:55:53 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    println("OUT ", out)
	    (out, ŷ -> (pb(ŷ), pb(ŷ .* f.mask)[2]))
	end
# time: 2023-07-05 02:55:55 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:56:23 JST
# mode: julia
	D.weight
# time: 2023-07-05 02:56:26 JST
# mode: julia
	D.w
# time: 2023-07-05 02:56:29 JST
# mode: julia
	D.d
# time: 2023-07-05 02:56:31 JST
# mode: julia
	D.d.weight
# time: 2023-07-05 02:56:44 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:57:21 JST
# mode: julia
	D.orig
# time: 2023-07-05 02:58:19 JST
# mode: julia
	Flux.trainable(f::FakeDense) = Flux.trainable(f.d)
# time: 2023-07-05 02:58:22 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:59:11 JST
# mode: julia
	D = deepcopy(D)
# time: 2023-07-05 02:59:15 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 02:59:24 JST
# mode: julia
	D(a)
# time: 2023-07-05 02:59:30 JST
# mode: julia
	@which D(a)
# time: 2023-07-05 02:59:47 JST
# mode: julia
	(f:FakeDense)(x) = f.d(x)
# time: 2023-07-05 02:59:53 JST
# mode: julia
	(f::FakeDense)(x) = f.d(x)
# time: 2023-07-05 02:59:55 JST
# mode: julia
	D(a)
# time: 2023-07-05 02:59:59 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 03:01:10 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    println("OUT ", out)
	    (f(x), ŷ -> (pb(ŷ), pb(ŷ .* f.mask)[2]))
	end
# time: 2023-07-05 03:01:11 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 03:01:31 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    println("OUT ", out)
	    (f(x), ŷ -> (f(ŷ), pb(ŷ .* f.mask)[2]))
	end
# time: 2023-07-05 03:01:32 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 03:01:34 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    println("OUT ", out)
	    (f(x), ŷ -> (pb(ŷ), pb(ŷ .* f.mask)[2]))
	end
# time: 2023-07-05 03:01:35 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 03:03:08 JST
# mode: help
	Flux.Conv
# time: 2023-07-05 03:04:41 JST
# mode: julia
	function FakeConv(c::Conv)
	    
	    orig = c.weight
	    mask = similar(orig, Bool) .= true
	    return FakeConv(c, orig, mask)
	end
# time: 2023-07-05 03:04:41 JST
# mode: julia
	(f::FakeConv)(x) = (c.weight .*= f.mask; c(x))
# time: 2023-07-05 03:04:41 JST
# mode: julia
	Flux.@functor FakeConv
# time: 2023-07-05 03:05:04 JST
# mode: julia
	function FakeConv(c::Conv)
	    
	    orig = c.weight
	    mask = similar(orig, Bool) .= true
	    return FakeConv(c, orig, mask)
	end
# time: 2023-07-05 03:05:04 JST
# mode: julia
	(f::FakeConv)(x) = (f.c.weight .*= f.mask; f.c(x))
# time: 2023-07-05 03:05:04 JST
# mode: julia
	Flux.@functor FakeConv
# time: 2023-07-05 03:05:04 JST
# mode: julia
	Flux.trainable(c::FakeConv) = Flux.trainable(c.c)
# time: 2023-07-05 03:05:28 JST
# mode: julia
	Conv((3, 5), 2=>3).weight
# time: 2023-07-05 03:05:58 JST
# mode: julia
	function FakeConv(c::Conv)
	    orig = deepcopy(c.weight)
	    mask = similar(orig, Bool) .= true
	    return FakeConv(c, orig, mask)
	end
# time: 2023-07-05 03:06:02 JST
# mode: julia
	(f::FakeConv)(x) = (f.c.weight .*= f.mask; f.c(x))
# time: 2023-07-05 03:06:34 JST
# mode: julia
	(f::FakeConv)(x) = 2
# time: 2023-07-05 03:06:56 JST
# mode: julia
	FakeConv(Conv((3, 3), 2=>5))
# time: 2023-07-05 03:07:06 JST
# mode: julia
	Conv((3, 5), 2=>3)
# time: 2023-07-05 03:07:09 JST
# mode: julia
	FakeConv(_)
# time: 2023-07-05 03:07:26 JST
# mode: julia
	conv = Conv((3, 3), 2=>3)
# time: 2023-07-05 03:07:30 JST
# mode: julia
	FakeConv(conv)
# time: 2023-07-05 03:07:42 JST
# mode: julia
	function FakeConv(c::Flux.Conv)
	    orig = deepcopy(c.weight)
	    mask = similar(orig, Bool) .= true
	    return FakeConv(c, orig, mask)
	end
# time: 2023-07-05 03:07:44 JST
# mode: julia
	FakeConv(conv)
# time: 2023-07-05 03:07:49 JST
# mode: julia
	Conv
# time: 2023-07-05 03:07:52 JST
# mode: julia
	conv
# time: 2023-07-05 03:07:57 JST
# mode: julia
	conv isa Conv
# time: 2023-07-05 03:08:05 JST
# mode: julia
	function FakeConv(c)
	    orig = deepcopy(c.weight)
	    mask = similar(orig, Bool) .= true
	    return FakeConv(c, orig, mask)
	end
# time: 2023-07-05 03:08:08 JST
# mode: julia
	FakeConv(conv)
# time: 2023-07-05 03:08:23 JST
# mode: julia
	function FakeConv(c<:Flux.Conv)
	    orig = deepcopy(c.weight)
	    mask = similar(orig, Bool) .= true
	    return FakeConv(c, orig, mask)
	end
# time: 2023-07-05 03:08:36 JST
# mode: julia
	function FakeConv(c::C) where C<:Flux.Conv
	    orig = deepcopy(c.weight)
	    mask = similar(orig, Bool) .= true
	    return FakeConv(c, orig, mask)
	end
# time: 2023-07-05 03:08:38 JST
# mode: julia
	FakeConv(conv)
# time: 2023-07-05 03:09:04 JST
# mode: julia
	typeof(conv)
# time: 2023-07-05 03:10:03 JST
# mode: julia
	struct FakeConv2
	    c
	    orig
	    mask
	end
# time: 2023-07-05 03:10:03 JST
# mode: julia
	function FakeConv2(c)
	    orig = deepcopy(c.weight)
	    mask = similar(orig, Bool) .= true
	    return FakeConv2(c, orig, mask)
	end
# time: 2023-07-05 03:10:03 JST
# mode: julia
	(f::FakeConv2)(x) = (f.c.weight .*= f.mask; f.c(x))
# time: 2023-07-05 03:10:03 JST
# mode: julia
	Flux.@functor FakeConv2
# time: 2023-07-05 03:10:03 JST
# mode: julia
	Flux.trainable(c::FakeConv2) = Flux.trainable(c.c)
# time: 2023-07-05 03:10:08 JST
# mode: julia
	FakeConv2(conv)
# time: 2023-07-05 03:10:24 JST
# mode: julia
	x = rand(Float32, 3, 3, 2, 1)
# time: 2023-07-05 03:10:54 JST
# mode: julia
	f = FakeConv2(conv)
# time: 2023-07-05 03:10:58 JST
# mode: julia
	fake = FakeConv2(conv)
# time: 2023-07-05 03:11:16 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(a))
	end
# time: 2023-07-05 03:11:41 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    (f(x), ŷ -> (pb(ŷ), pb(ŷ .* f.mask)[2]))
	end
# time: 2023-07-05 03:11:45 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(a))
	end
# time: 2023-07-05 03:11:55 JST
# mode: julia
	fake(x)
# time: 2023-07-05 03:12:00 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(a))
	end
# time: 2023-07-05 03:12:52 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    (f(x), ŷ -> (pb(ŷ), pb(ŷ .* f.mask)[2]))
	end
# time: 2023-07-05 03:12:54 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(a))
	end
# time: 2023-07-05 03:13:27 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:13:45 JST
# mode: julia
	gradsconv = Flux.gradient(conv) do conv
	    sum(conv(x))
	end
# time: 2023-07-05 03:13:59 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    (f(x), ŷ -> (pb(ŷ), pb(ŷ .* f.mask)[2]))
	end
# time: 2023-07-05 03:14:07 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:14:10 JST
# mode: julia
	fake(x)
# time: 2023-07-05 03:14:11 JST
# mode: julia
	conv(x)
# time: 2023-07-05 03:14:18 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:14:43 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    (f(x), ŷ -> (pb(ŷ), pb(ŷ .* f.mask')[2]))
	end
# time: 2023-07-05 03:14:44 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:14:53 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    (f(x), ŷ -> (pb(ŷ), pb(ŷ' .* f.mask)[2]))
	end
# time: 2023-07-05 03:14:54 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:15:26 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    (f(x), ŷ -> (pb(ŷ), pb(ŷ .* f.mask)[2]))
	end
# time: 2023-07-05 03:15:31 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:15:51 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    println("f(x)", f(x))
	    (f(x), ŷ -> (pb(ŷ), pb(ŷ .* f.mask)[2]))
	end
# time: 2023-07-05 03:15:53 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:16:02 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    println("f(x)", f(x))
	    (f(x), ŷ -> (pb(ŷ .* f.mask), pb(ŷ .* f.mask)[2]))
	end
# time: 2023-07-05 03:16:03 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:16:34 JST
# mode: julia
	gradsconv = Flux.gradient(conv) do conv
	    sum(conv(x))
	end
# time: 2023-07-05 03:16:42 JST
# mode: julia
	gradsconv[1]
# time: 2023-07-05 03:16:43 JST
# mode: julia
	gradsconv[1][1]
# time: 2023-07-05 03:16:46 JST
# mode: julia
	gradsconv[1]
# time: 2023-07-05 03:16:48 JST
# mode: julia
	gradsconv[1][2]
# time: 2023-07-05 03:16:55 JST
# mode: julia
	conv.weight
# time: 2023-07-05 03:17:01 JST
# mode: julia
	gradsconv[1][2]
# time: 2023-07-05 03:17:03 JST
# mode: julia
	gradsconv[1]
# time: 2023-07-05 03:17:05 JST
# mode: julia
	gradsconv[1][1]
# time: 2023-07-05 03:17:07 JST
# mode: julia
	gradsconv[1][2]
# time: 2023-07-05 03:17:09 JST
# mode: julia
	gradsconv[1][3]
# time: 2023-07-05 03:17:13 JST
# mode: julia
	gradsconv[1][4]
# time: 2023-07-05 03:17:46 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    println("f(x)", f(x))
	    (f(x), ŷ -> (pb(ŷ .* f.mask), pb(ŷ .* f.mask)[2]))
	end
# time: 2023-07-05 03:17:53 JST
# mode: julia
	gradsconv = Flux.gradient(conv) do conv
	    sum(conv(x))
	end
# time: 2023-07-05 03:17:59 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:18:37 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    println("f(x)", f(x))
	    (f(x), ŷ -> (println(ŷ); println(size(ŷ)); (pb(ŷ .* f.mask), pb(ŷ .* f.mask)[2]))
	end
# time: 2023-07-05 03:18:43 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    println("f(x)", f(x))
	    (f(x), ŷ -> (println(ŷ); println(size(ŷ)); (pb(ŷ .* f.mask), pb(ŷ .* f.mask)[2])))
	end
# time: 2023-07-05 03:18:45 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:19:18 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    println("f(x)", f(x))
	    (f(x), ŷ -> (println(ŷ); println(size(ŷ)); (pb(ŷ), pb(ŷ)[2])))
	end
# time: 2023-07-05 03:19:20 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:19:42 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    println("f(x)", f(x))
	    (f(x), ŷ -> (println(ŷ); println(size(ŷ)); (f.mask .* pb(ŷ), f.mask .* pb(ŷ)[2])))
	end
# time: 2023-07-05 03:19:43 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:20:08 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    println("f(x)", f(x))
	    (f(x), ŷ -> (println(ŷ); println(size(ŷ)); println(pb(ŷ)); (pb(ŷ), pb(ŷ)[2])))
	end
# time: 2023-07-05 03:20:11 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:20:21 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    println("f(x)", f(x))
	    (f(x), ŷ -> (println(ŷ); println(size(ŷ)); println(pb(ŷ)[1]); (pb(ŷ), pb(ŷ)[2])))
	end
# time: 2023-07-05 03:20:23 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:20:34 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    println("f(x)", f(x))
	    (f(x), ŷ -> (println(ŷ); println(size(ŷ)); println(pb(ŷ)[1][1]); (pb(ŷ), pb(ŷ)[2])))
	end
# time: 2023-07-05 03:20:35 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:20:48 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    println("f(x)", f(x))
	    (f(x), ŷ -> (println(ŷ); println(size(ŷ)); println(pb(ŷ)[1][2]); (pb(ŷ), pb(ŷ)[2])))
	end
# time: 2023-07-05 03:20:48 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:21:04 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    println("f(x)", f(x))
	    (f(x), ŷ -> (println(ŷ); println(size(ŷ)); println("YHAT ", size(pb(ŷ)[1][2])); (pb(ŷ), pb(ŷ)[2])))
	end
# time: 2023-07-05 03:21:05 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:21:27 JST
# mode: julia
	Zygote.@adjoint function (f::FakeConv2)(x)
	    f.c.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.c, x)
	    println("OUT ", out)
	    println("f(x)", f(x))
	    (f(x), ŷ -> (println(ŷ); println(size(ŷ)); println("YHAT ", size(pb(ŷ)[1][2])); (pb(ŷ)[1][2] .* f.mask, pb(ŷ)[2])))
	end
# time: 2023-07-05 03:21:29 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:21:47 JST
# mode: julia
	fake = deepcopy(fake)
# time: 2023-07-05 03:21:59 JST
# mode: julia
	fake.mask
# time: 2023-07-05 03:22:09 JST
# mode: julia
	fake.mask[1, :] .= false
# time: 2023-07-05 03:22:14 JST
# mode: julia
	fake.mask[1, :, :] .= false
# time: 2023-07-05 03:22:25 JST
# mode: julia
	fake.mask[:, 1, :, :] .= false
# time: 2023-07-05 03:22:32 JST
# mode: julia
	fake.mask
# time: 2023-07-05 03:22:40 JST
# mode: julia
	fake.mask[:, :, 1, :] .= false
# time: 2023-07-05 03:22:42 JST
# mode: julia
	fake.mask
# time: 2023-07-05 03:22:47 JST
# mode: julia
	gradsf = Flux.gradient(fake) do fake
	    sum(fake(x))
	end
# time: 2023-07-05 03:22:53 JST
# mode: julia
	gradsf
# time: 2023-07-05 03:22:54 JST
# mode: julia
	gradsf[1]
# time: 2023-07-05 03:23:51 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    println("OUT ", out)
	    (f(x), ŷ -> (pb(ŷ), pb(ŷ .* f.mask)[2]))
	end
# time: 2023-07-05 03:23:57 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 03:24:18 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    println("OUT ", out)
	    (f(x), ŷ -> (println("PB ", pb(ŷ); (pb(ŷ), pb(ŷ .* f.mask)[2])))
	end
# time: 2023-07-05 03:24:26 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    println("OUT ", out)
	    (f(x), ŷ -> (println("PB ", pb(ŷ)); (pb(ŷ), pb(ŷ .* f.mask)[2]))
	end
# time: 2023-07-05 03:24:38 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    println("OUT ", out)
	    (f(x), ŷ -> (println("PB ", pb(ŷ)); (pb(ŷ), pb(ŷ .* f.mask)[2])))
	end
# time: 2023-07-05 03:24:42 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 03:24:51 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    println("OUT ", out)
	    (f(x), ŷ -> (println("PB ", pb(ŷ)); (pb(ŷ)[1][2], pb(ŷ .* f.mask)[2])))
	end
# time: 2023-07-05 03:24:52 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 03:25:04 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    println("OUT ", out)
	    (f(x), ŷ -> (println("PB ", pb(ŷ)[1]); (pb(ŷ), pb(ŷ .* f.mask)[2])))
	end
# time: 2023-07-05 03:25:05 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 03:25:10 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    println("OUT ", out)
	    (f(x), ŷ -> (println("PB ", pb(ŷ)[1][1]); (pb(ŷ), pb(ŷ .* f.mask)[2])))
	end
# time: 2023-07-05 03:25:10 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 03:25:34 JST
# mode: julia
	Zygote.@adjoint function (f::FakeDense)(x)
	    f.d.weight .*= f.mask
	    println("YO ", x)
	    # println(f)
	    out, pb = Zygote._pullback(f.d, x)
	    println("OUT ", out)
	    (f(x), ŷ -> (println("PB ", pb(ŷ)[1][1]); (pb(ŷ)[1][1] .* f.mask, pb(ŷ .* f.mask)[2])))
	end
# time: 2023-07-05 03:25:36 JST
# mode: julia
	gradsd = Flux.gradient(D) do D
	    sum(D(a))
	end
# time: 2023-07-05 03:25:49 JST
# mode: julia
	gradsp[1][1][1][1]
# time: 2023-07-05 03:25:54 JST
# mode: julia
	gradss[1][1][1]
# time: 2023-07-05 03:25:55 JST
# mode: julia
	gradss[1][1]
# time: 2023-07-05 03:25:58 JST
# mode: julia
	gradsd[1][1]
# time: 2023-07-05 03:26:01 JST
# mode: julia
	gradsd[1]
# time: 2023-07-05 12:20:49 JST
# mode: julia
	exit()
